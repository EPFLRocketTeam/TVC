
CountdownHopper_FCU001V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000747c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800769c  0800769c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a4  080076a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080076ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b8c  20000010  080076bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b9c  080076bc  00024b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3b9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000362d  00000000  00000000  0003c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a68  00000000  00000000  0003fa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001908  00000000  00000000  00041490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f8a  00000000  00000000  00042d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013274  00000000  00000000  0005bd22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ede2  00000000  00000000  0006ef96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010dd78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071ec  00000000  00000000  0010ddf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007604 	.word	0x08007604

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08007604 	.word	0x08007604

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <PreSleepProcessing>:
/* USER CODE END 1 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
/* place for user code */ 
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	2000002c 	.word	0x2000002c
 8000558:	20000084 	.word	0x20000084

0800055c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4a07      	ldr	r2, [pc, #28]	; (8000588 <vApplicationGetTimerTaskMemory+0x2c>)
 800056c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <vApplicationGetTimerTaskMemory+0x30>)
 8000572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800057a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	20000284 	.word	0x20000284
 800058c:	200002dc 	.word	0x200002dc

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b090      	sub	sp, #64	; 0x40
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fed5 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f853 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fb29 	bl	8000bf4 <MX_GPIO_Init>
  MX_TIM4_Init();
 80005a2:	f000 fa37 	bl	8000a14 <MX_TIM4_Init>
  MX_I2C2_Init();
 80005a6:	f000 f909 	bl	80007bc <MX_I2C2_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005aa:	f000 faf5 	bl	8000b98 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 80005ae:	f000 fac9 	bl	8000b44 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80005b2:	f000 f967 	bl	8000884 <MX_SPI2_Init>
  MX_ADC1_Init();
 80005b6:	f000 f8af 	bl	8000718 <MX_ADC1_Init>
  MX_SPI1_Init();
 80005ba:	f000 f92d 	bl	8000818 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005be:	f000 f997 	bl	80008f0 <MX_TIM2_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of BlinkTimer */
  osTimerDef(BlinkTimer, Blink_LED1);
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <main+0x9c>)
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80005c6:	2300      	movs	r3, #0
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 80005ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 f94c 	bl	8004870 <osTimerCreate>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <main+0xa0>)
 80005dc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <main+0xa4>)
 80005e0:	f107 041c 	add.w	r4, r7, #28
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 f8d8 	bl	80047ae <osThreadCreate>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <main+0xa8>)
 8000602:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink */
  osThreadDef(blink, FRTOS_Blink, osPriorityNormal, 0, 128);
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0xac>)
 8000606:	463c      	mov	r4, r7
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkHandle = osThreadCreate(osThread(blink), NULL);
 8000616:	463b      	mov	r3, r7
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 f8c7 	bl	80047ae <osThreadCreate>
 8000620:	4602      	mov	r2, r0
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <main+0xb0>)
 8000624:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000626:	f004 f8bb 	bl	80047a0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	e7fe      	b.n	800062a <main+0x9a>
 800062c:	08000d69 	.word	0x08000d69
 8000630:	20004a78 	.word	0x20004a78
 8000634:	08007628 	.word	0x08007628
 8000638:	20004538 	.word	0x20004538
 800063c:	0800764c 	.word	0x0800764c
 8000640:	20004b54 	.word	0x20004b54

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 ffcd 	bl	80075f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xd0>)
 8000692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006bc:	23a8      	movs	r3, #168	; 0xa8
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fe21 	bl	8002314 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 fb54 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 f87b 	bl	80027f4 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000704:	f000 fb3e 	bl	8000d84 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x98>)
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_ADC1_Init+0x9c>)
 800072e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000732:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000736:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_ADC1_Init+0x98>)
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <MX_ADC1_Init+0xa0>)
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000766:	2201      	movs	r2, #1
 8000768:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000774:	2201      	movs	r2, #1
 8000776:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_ADC1_Init+0x98>)
 800077a:	f000 fe77 	bl	800146c <HAL_ADC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 fafe 	bl	8000d84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000788:	2309      	movs	r3, #9
 800078a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC1_Init+0x98>)
 800079a:	f000 feab 	bl	80014f4 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a4:	f000 faee 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20004a30 	.word	0x20004a30
 80007b4:	40012000 	.word	0x40012000
 80007b8:	0f000001 	.word	0x0f000001

080007bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2C2_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <MX_I2C2_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_I2C2_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_I2C2_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_I2C2_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_I2C2_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_I2C2_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_I2C2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_I2C2_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_I2C2_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_I2C2_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_I2C2_Init+0x50>)
 80007fa:	f001 fb35 	bl	8001e68 <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 fabe 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200049dc 	.word	0x200049dc
 8000810:	40005800 	.word	0x40005800
 8000814:	000186a0 	.word	0x000186a0

08000818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI1_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI1_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI1_Init+0x64>)
 800084c:	2210      	movs	r2, #16
 800084e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI1_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI1_Init+0x64>)
 800086a:	f002 f9b3 	bl	8002bd4 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 fa86 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20004abc 	.word	0x20004abc
 8000880:	40013000 	.word	0x40013000

08000884 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI2_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI2_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI2_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI2_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI2_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008b8:	2208      	movs	r2, #8
 80008ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008d6:	f002 f97d 	bl	8002bd4 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 fa50 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000453c 	.word	0x2000453c
 80008ec:	40003800 	.word	0x40003800

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091c:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <MX_TIM2_Init+0x120>)
 800091e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_TIM2_Init+0x120>)
 8000926:	2214      	movs	r2, #20
 8000928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <MX_TIM2_Init+0x120>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000930:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_TIM2_Init+0x120>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <MX_TIM2_Init+0x120>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <MX_TIM2_Init+0x120>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000942:	4833      	ldr	r0, [pc, #204]	; (8000a10 <MX_TIM2_Init+0x120>)
 8000944:	f002 f9aa 	bl	8002c9c <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800094e:	f000 fa19 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000952:	482f      	ldr	r0, [pc, #188]	; (8000a10 <MX_TIM2_Init+0x120>)
 8000954:	f002 fa02 	bl	8002d5c <HAL_TIM_IC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800095e:	f000 fa11 	bl	8000d84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000962:	2307      	movs	r3, #7
 8000964:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4827      	ldr	r0, [pc, #156]	; (8000a10 <MX_TIM2_Init+0x120>)
 8000972:	f002 fb8b 	bl	800308c <HAL_TIM_SlaveConfigSynchro>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800097c:	f000 fa02 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <MX_TIM2_Init+0x120>)
 8000990:	f002 ffee 	bl	8003970 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800099a:	f000 f9f3 	bl	8000d84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800099e:	230a      	movs	r3, #10
 80009a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <MX_TIM2_Init+0x120>)
 80009b6:	f002 fa06 	bl	8002dc6 <HAL_TIM_IC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80009c0:	f000 f9e0 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2204      	movs	r2, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_TIM2_Init+0x120>)
 80009cc:	f002 f9fb 	bl	8002dc6 <HAL_TIM_IC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80009d6:	f000 f9d5 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2208      	movs	r2, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <MX_TIM2_Init+0x120>)
 80009e2:	f002 f9f0 	bl	8002dc6 <HAL_TIM_IC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80009ec:	f000 f9ca 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	220c      	movs	r2, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <MX_TIM2_Init+0x120>)
 80009f8:	f002 f9e5 	bl	8002dc6 <HAL_TIM_IC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 8000a02:	f000 f9bf 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20004b14 	.word	0x20004b14

08000a14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a46:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a48:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <MX_TIM4_Init+0x12c>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a4c:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000a58:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a6a:	4834      	ldr	r0, [pc, #208]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a6c:	f002 f916 	bl	8002c9c <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a76:	f000 f985 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a7a:	4830      	ldr	r0, [pc, #192]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a7c:	f002 f939 	bl	8002cf2 <HAL_TIM_PWM_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a86:	f000 f97d 	bl	8000d84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4828      	ldr	r0, [pc, #160]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000a9a:	f002 faf7 	bl	800308c <HAL_TIM_SlaveConfigSynchro>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000aa4:	f000 f96e 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4821      	ldr	r0, [pc, #132]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000ab8:	f002 ff5a 	bl	8003970 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ac2:	f000 f95f 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac6:	2360      	movs	r3, #96	; 0x60
 8000ac8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4817      	ldr	r0, [pc, #92]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000ade:	f002 fa0f 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ae8:	f000 f94c 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	2204      	movs	r2, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000af4:	f002 fa04 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000afe:	f000 f941 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b02:	463b      	mov	r3, r7
 8000b04:	2208      	movs	r2, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000b0a:	f002 f9f9 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000b14:	f000 f936 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000b20:	f002 f9ee 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000b2a:	f000 f92b 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <MX_TIM4_Init+0x128>)
 8000b30:	f000 fad2 	bl	80010d8 <HAL_TIM_MspPostInit>

}
 8000b34:	bf00      	nop
 8000b36:	3738      	adds	r7, #56	; 0x38
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20004594 	.word	0x20004594
 8000b40:	40000800 	.word	0x40000800

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_USART1_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b7c:	f002 ff66 	bl	8003a4c <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 f8fd 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20004a7c 	.word	0x20004a7c
 8000b94:	40011000 	.word	0x40011000

08000b98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ba2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bdc:	f001 fa7c 	bl	80020d8 <HAL_PCD_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000be6:	f000 f8cd 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200045d4 	.word	0x200045d4

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a41      	ldr	r2, [pc, #260]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a3a      	ldr	r2, [pc, #232]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b38      	ldr	r3, [pc, #224]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a33      	ldr	r2, [pc, #204]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <MX_GPIO_Init+0x124>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LPS22HB_CS_GPIO_Port, LPS22HB_CS_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c80:	4826      	ldr	r0, [pc, #152]	; (8000d1c <MX_GPIO_Init+0x128>)
 8000c82:	f001 f8bd 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_CS_Pin|BLE_RSTN_Pin|LIS2MDL_CS_Pin|LED2_Pin 
 8000c86:	2200      	movs	r2, #0
 8000c88:	f241 0135 	movw	r1, #4149	; 0x1035
 8000c8c:	4824      	ldr	r0, [pc, #144]	; (8000d20 <MX_GPIO_Init+0x12c>)
 8000c8e:	f001 f8b7 	bl	8001e00 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DS33_CS_GPIO_Port, LSM6DS33_CS_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	4822      	ldr	r0, [pc, #136]	; (8000d24 <MX_GPIO_Init+0x130>)
 8000c9a:	f001 f8b1 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LPS22HB_CS_Pin */
  GPIO_InitStruct.Pin = LPS22HB_CS_Pin;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LPS22HB_CS_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <MX_GPIO_Init+0x128>)
 8000cb8:	f000 ff20 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_IRQ_Pin */
  GPIO_InitStruct.Pin = BLE_IRQ_Pin;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4815      	ldr	r0, [pc, #84]	; (8000d24 <MX_GPIO_Init+0x130>)
 8000cd0:	f000 ff14 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_CS_Pin BLE_RSTN_Pin LIS2MDL_CS_Pin LED2_Pin 
                           LED1_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin|BLE_RSTN_Pin|LIS2MDL_CS_Pin|LED2_Pin 
 8000cd4:	f241 0335 	movw	r3, #4149	; 0x1035
 8000cd8:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_GPIO_Init+0x12c>)
 8000cee:	f000 ff05 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DS33_CS_Pin */
  GPIO_InitStruct.Pin = LSM6DS33_CS_Pin;
 8000cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LSM6DS33_CS_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <MX_GPIO_Init+0x130>)
 8000d0c:	f000 fef6 	bl	8001afc <HAL_GPIO_Init>

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020400 	.word	0x40020400
 8000d24:	40020000 	.word	0x40020000

08000d28 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    // to the callback function
	osTimerStart(BlinkTimerHandle, 1000);
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <StartDefaultTask+0x20>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fdcd 	bl	80048d8 <osTimerStart>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f003 fd81 	bl	8004846 <osDelay>
 8000d44:	e7fb      	b.n	8000d3e <StartDefaultTask+0x16>
 8000d46:	bf00      	nop
 8000d48:	20004a78 	.word	0x20004a78

08000d4c <FRTOS_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FRTOS_Blink */
void FRTOS_Blink(void const * argument)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]


	for( ;; )
	{
	 // Wait for the next cycle.
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000d54:	2110      	movs	r1, #16
 8000d56:	4803      	ldr	r0, [pc, #12]	; (8000d64 <FRTOS_Blink+0x18>)
 8000d58:	f001 f86b 	bl	8001e32 <HAL_GPIO_TogglePin>
		osDelay(100);
 8000d5c:	2064      	movs	r0, #100	; 0x64
 8000d5e:	f003 fd72 	bl	8004846 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000d62:	e7f7      	b.n	8000d54 <FRTOS_Blink+0x8>
 8000d64:	40020400 	.word	0x40020400

08000d68 <Blink_LED1>:
  /* USER CODE END FRTOS_Blink */
}

/* Blink_LED1 function */
void Blink_LED1(void const * argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink_LED1 */
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000d70:	2120      	movs	r1, #32
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <Blink_LED1+0x18>)
 8000d74:	f001 f85d 	bl	8001e32 <HAL_GPIO_TogglePin>
  /* USER CODE END Blink_LED1 */
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40020400 	.word	0x40020400

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_MspInit+0x54>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <HAL_MspInit+0x54>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x54>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_MspInit+0x54>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_MspInit+0x54>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_MspInit+0x54>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	f06f 0001 	mvn.w	r0, #1
 8000dda:	f000 fe66 	bl	8001aaa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_ADC_MspInit+0x7c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d127      	bne.n	8000e5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 8000e46:	2302      	movs	r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_ADC_MspInit+0x84>)
 8000e5a:	f000 fe4f 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40012000 	.word	0x40012000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020400 	.word	0x40020400

08000e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <HAL_I2C_MspInit+0xa4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d13c      	bne.n	8000f10 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_I2C_MspInit+0xa8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_I2C_MspInit+0xa8>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_I2C_MspInit+0xa8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb8:	2312      	movs	r3, #18
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <HAL_I2C_MspInit+0xac>)
 8000ed0:	f000 fe14 	bl	8001afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed8:	2312      	movs	r3, #18
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000ee4:	2309      	movs	r3, #9
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <HAL_I2C_MspInit+0xac>)
 8000ef0:	f000 fe04 	bl	8001afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_I2C_MspInit+0xa8>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_I2C_MspInit+0xa8>)
 8000efe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_I2C_MspInit+0xa8>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	; 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40005800 	.word	0x40005800
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020400 	.word	0x40020400

08000f24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a32      	ldr	r2, [pc, #200]	; (800100c <HAL_SPI_MspInit+0xe8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a30      	ldr	r2, [pc, #192]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a29      	ldr	r2, [pc, #164]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f7e:	23e0      	movs	r3, #224	; 0xe0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f8e:	2305      	movs	r3, #5
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	481e      	ldr	r0, [pc, #120]	; (8001014 <HAL_SPI_MspInit+0xf0>)
 8000f9a:	f000 fdaf 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f9e:	e031      	b.n	8001004 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <HAL_SPI_MspInit+0xf4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12c      	bne.n	8001004 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_SPI_MspInit+0xec>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fe2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <HAL_SPI_MspInit+0xf8>)
 8001000:	f000 fd7c 	bl	8001afc <HAL_GPIO_Init>
}
 8001004:	bf00      	nop
 8001006:	3730      	adds	r7, #48	; 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40013000 	.word	0x40013000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40003800 	.word	0x40003800
 800101c:	40020400 	.word	0x40020400

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001040:	d12c      	bne.n	800109c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a19      	ldr	r2, [pc, #100]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800107a:	230f      	movs	r3, #15
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800108a:	2301      	movs	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <HAL_TIM_Base_MspInit+0xb0>)
 8001096:	f000 fd31 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800109a:	e012      	b.n	80010c2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_TIM_Base_MspInit+0xb4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10d      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_TIM_Base_MspInit+0xac>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40000800 	.word	0x40000800

080010d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_TIM_MspPostInit+0x68>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d11e      	bne.n	8001138 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_TIM_MspPostInit+0x6c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <HAL_TIM_MspPostInit+0x6c>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_TIM_MspPostInit+0x6c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001116:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800111a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <HAL_TIM_MspPostInit+0x70>)
 8001134:	f000 fce2 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40000800 	.word	0x40000800
 8001144:	40023800 	.word	0x40023800
 8001148:	40020400 	.word	0x40020400

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_UART_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12c      	bne.n	80011c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_UART_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011b8:	2307      	movs	r3, #7
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 80011c4:	f000 fc9a 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011fc:	d132      	bne.n	8001264 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_PCD_MspInit+0x90>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_PCD_MspInit+0x90>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_PCD_MspInit+0x90>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800121a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800122c:	230a      	movs	r3, #10
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <HAL_PCD_MspInit+0x94>)
 8001238:	f000 fc60 	bl	8001afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_PCD_MspInit+0x90>)
 800123e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_PCD_MspInit+0x90>)
 8001242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001246:	6353      	str	r3, [r2, #52]	; 0x34
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_PCD_MspInit+0x90>)
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_PCD_MspInit+0x90>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001256:	6453      	str	r3, [r2, #68]	; 0x44
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_PCD_MspInit+0x90>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 f89c 	bl	80013e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012b0:	f004 ffaa 	bl	8006208 <xTaskGetSchedulerState>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d001      	beq.n	80012be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012ba:	f005 fe25 	bl	8006f08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <SystemInit+0x28>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <SystemInit+0x28>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SystemInit+0x28>)
 80012da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012de:	609a      	str	r2, [r3, #8]
#endif
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012f6:	e003      	b.n	8001300 <LoopCopyDataInit>

080012f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012fe:	3104      	adds	r1, #4

08001300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001308:	d3f6      	bcc.n	80012f8 <CopyDataInit>
  ldr  r2, =_sbss
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800130c:	e002      	b.n	8001314 <LoopFillZerobss>

0800130e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800130e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001310:	f842 3b04 	str.w	r3, [r2], #4

08001314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001318:	d3f9      	bcc.n	800130e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800131a:	f7ff ffd3 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f006 f939 	bl	8007594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff f935 	bl	8000590 <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800132c:	080076ac 	.word	0x080076ac
  ldr  r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001334:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001338:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800133c:	20004b9c 	.word	0x20004b9c

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_Init+0x40>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_Init+0x40>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x40>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 fb91 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	200f      	movs	r0, #15
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fd0c 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fb9b 	bl	8001ae2 <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c4:	f000 fb71 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000004 	.word	0x20000004

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008
 800140c:	20004b58 	.word	0x20004b58

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20004b58 	.word	0x20004b58

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_Delay+0x40>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e033      	b.n	80014ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fcae 	bl	8000dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	f043 0202 	orr.w	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f93a 	bl	8001738 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
 80014da:	e001      	b.n	80014e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1c>
 800150c:	2302      	movs	r3, #2
 800150e:	e105      	b.n	800171c <HAL_ADC_ConfigChannel+0x228>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b09      	cmp	r3, #9
 800151e:	d925      	bls.n	800156c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68d9      	ldr	r1, [r3, #12]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	3b1e      	subs	r3, #30
 8001536:	2207      	movs	r2, #7
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43da      	mvns	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	400a      	ands	r2, r1
 8001544:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68d9      	ldr	r1, [r3, #12]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	4603      	mov	r3, r0
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4403      	add	r3, r0
 800155e:	3b1e      	subs	r3, #30
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	e022      	b.n	80015b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6919      	ldr	r1, [r3, #16]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	2207      	movs	r2, #7
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6919      	ldr	r1, [r3, #16]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4403      	add	r3, r0
 80015a8:	409a      	lsls	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d824      	bhi.n	8001604 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b05      	subs	r3, #5
 80015cc:	221f      	movs	r2, #31
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	400a      	ands	r2, r1
 80015da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3b05      	subs	r3, #5
 80015f6:	fa00 f203 	lsl.w	r2, r0, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
 8001602:	e04c      	b.n	800169e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b0c      	cmp	r3, #12
 800160a:	d824      	bhi.n	8001656 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b23      	subs	r3, #35	; 0x23
 800161e:	221f      	movs	r2, #31
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43da      	mvns	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	400a      	ands	r2, r1
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b23      	subs	r3, #35	; 0x23
 8001648:	fa00 f203 	lsl.w	r2, r0, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
 8001654:	e023      	b.n	800169e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	3b41      	subs	r3, #65	; 0x41
 8001668:	221f      	movs	r2, #31
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	400a      	ands	r2, r1
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b41      	subs	r3, #65	; 0x41
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_ADC_ConfigChannel+0x234>)
 80016a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_ADC_ConfigChannel+0x238>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d109      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x1cc>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_ADC_ConfigChannel+0x238>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d123      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x21e>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d003      	beq.n	80016da <HAL_ADC_ConfigChannel+0x1e6>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b11      	cmp	r3, #17
 80016d8:	d11b      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b10      	cmp	r3, #16
 80016ec:	d111      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_ADC_ConfigChannel+0x23c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_ADC_ConfigChannel+0x240>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	0c9a      	lsrs	r2, r3, #18
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001704:	e002      	b.n	800170c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3b01      	subs	r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f9      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40012300 	.word	0x40012300
 800172c:	40012000 	.word	0x40012000
 8001730:	20000000 	.word	0x20000000
 8001734:	431bde83 	.word	0x431bde83

08001738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001740:	4b79      	ldr	r3, [pc, #484]	; (8001928 <ADC_Init+0x1f0>)
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	431a      	orrs	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800176c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	021a      	lsls	r2, r3, #8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	4a58      	ldr	r2, [pc, #352]	; (800192c <ADC_Init+0x1f4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d022      	beq.n	8001816 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	e00f      	b.n	8001836 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001834:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0202 	bic.w	r2, r2, #2
 8001844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6899      	ldr	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7e1b      	ldrb	r3, [r3, #24]
 8001850:	005a      	lsls	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001872:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	3b01      	subs	r3, #1
 8001890:	035a      	lsls	r2, r3, #13
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	e007      	b.n	80018ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	051a      	lsls	r2, r3, #20
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ee:	025a      	lsls	r2, r3, #9
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6899      	ldr	r1, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	029a      	lsls	r2, r3, #10
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	609a      	str	r2, [r3, #8]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40012300 	.word	0x40012300
 800192c:	0f000001 	.word	0x0f000001

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff47 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff5c 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffb0 	bl	8001a50 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e159      	b.n	8001dcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 8148 	bne.w	8001dc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d00b      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4a:	2b11      	cmp	r3, #17
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0xfc>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d123      	bne.n	8001c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	08da      	lsrs	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3208      	adds	r2, #8
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a2 	beq.w	8001dc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_GPIO_Init+0x2e4>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a55      	ldr	r2, [pc, #340]	; (8001de0 <HAL_GPIO_Init+0x2e4>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_GPIO_Init+0x2e4>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9e:	4a51      	ldr	r2, [pc, #324]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_GPIO_Init+0x2ec>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x202>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a47      	ldr	r2, [pc, #284]	; (8001dec <HAL_GPIO_Init+0x2f0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x1fe>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a46      	ldr	r2, [pc, #280]	; (8001df0 <HAL_GPIO_Init+0x2f4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x1fa>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a45      	ldr	r2, [pc, #276]	; (8001df4 <HAL_GPIO_Init+0x2f8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x1f6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a44      	ldr	r2, [pc, #272]	; (8001df8 <HAL_GPIO_Init+0x2fc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x1f2>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cee:	2307      	movs	r3, #7
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x204>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4934      	ldr	r1, [pc, #208]	; (8001de4 <HAL_GPIO_Init+0x2e8>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1e:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d42:	4a2e      	ldr	r2, [pc, #184]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d48:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_GPIO_Init+0x300>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f aea2 	bls.w	8001b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3724      	adds	r7, #36	; 0x24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	401a      	ands	r2, r3
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d104      	bne.n	8001e56 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	041a      	lsls	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e11f      	b.n	80020ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fff0 	bl	8000e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f000 fe5a 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a7b      	ldr	r2, [pc, #492]	; (80020c4 <HAL_I2C_Init+0x25c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d807      	bhi.n	8001eec <HAL_I2C_Init+0x84>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a7a      	ldr	r2, [pc, #488]	; (80020c8 <HAL_I2C_Init+0x260>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e006      	b.n	8001efa <HAL_I2C_Init+0x92>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a77      	ldr	r2, [pc, #476]	; (80020cc <HAL_I2C_Init+0x264>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0db      	b.n	80020ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a72      	ldr	r2, [pc, #456]	; (80020d0 <HAL_I2C_Init+0x268>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a64      	ldr	r2, [pc, #400]	; (80020c4 <HAL_I2C_Init+0x25c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d802      	bhi.n	8001f3c <HAL_I2C_Init+0xd4>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	e009      	b.n	8001f50 <HAL_I2C_Init+0xe8>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	4a63      	ldr	r2, [pc, #396]	; (80020d4 <HAL_I2C_Init+0x26c>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	3301      	adds	r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4956      	ldr	r1, [pc, #344]	; (80020c4 <HAL_I2C_Init+0x25c>)
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d80d      	bhi.n	8001f8c <HAL_I2C_Init+0x124>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e59      	subs	r1, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	bf38      	it	cc
 8001f88:	2304      	movcc	r3, #4
 8001f8a:	e04f      	b.n	800202c <HAL_I2C_Init+0x1c4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d111      	bne.n	8001fb8 <HAL_I2C_Init+0x150>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	440b      	add	r3, r1
 8001fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e012      	b.n	8001fde <HAL_I2C_Init+0x176>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e58      	subs	r0, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	0099      	lsls	r1, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf0c      	ite	eq
 8001fd8:	2301      	moveq	r3, #1
 8001fda:	2300      	movne	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Init+0x17e>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e022      	b.n	800202c <HAL_I2C_Init+0x1c4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10e      	bne.n	800200c <HAL_I2C_Init+0x1a4>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e58      	subs	r0, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6859      	ldr	r1, [r3, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	440b      	add	r3, r1
 8001ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002000:	3301      	adds	r3, #1
 8002002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200a:	e00f      	b.n	800202c <HAL_I2C_Init+0x1c4>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1e58      	subs	r0, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	0099      	lsls	r1, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002022:	3301      	adds	r3, #1
 8002024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	6809      	ldr	r1, [r1, #0]
 8002030:	4313      	orrs	r3, r2
 8002032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800205a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6911      	ldr	r1, [r2, #16]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68d2      	ldr	r2, [r2, #12]
 8002066:	4311      	orrs	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	430b      	orrs	r3, r1
 800206e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	000186a0 	.word	0x000186a0
 80020c8:	001e847f 	.word	0x001e847f
 80020cc:	003d08ff 	.word	0x003d08ff
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	10624dd3 	.word	0x10624dd3

080020d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	b08f      	sub	sp, #60	; 0x3c
 80020dc:	af0a      	add	r7, sp, #40	; 0x28
 80020de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e10f      	b.n	800230a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d106      	bne.n	800210a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff f869 	bl	80011dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f002 f8ba 	bl	80042a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	687e      	ldr	r6, [r7, #4]
 8002136:	466d      	mov	r5, sp
 8002138:	f106 0410 	add.w	r4, r6, #16
 800213c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002148:	e885 0003 	stmia.w	r5, {r0, r1}
 800214c:	1d33      	adds	r3, r6, #4
 800214e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002150:	6838      	ldr	r0, [r7, #0]
 8002152:	f002 f845 	bl	80041e0 <USB_CoreInit>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0d0      	b.n	800230a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f002 f8a8 	bl	80042c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e04a      	b.n	8002210 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	333d      	adds	r3, #61	; 0x3d
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	333c      	adds	r3, #60	; 0x3c
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	b298      	uxth	r0, r3
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3342      	adds	r3, #66	; 0x42
 80021b6:	4602      	mov	r2, r0
 80021b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	333f      	adds	r3, #63	; 0x3f
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	3344      	adds	r3, #68	; 0x44
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3348      	adds	r3, #72	; 0x48
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3350      	adds	r3, #80	; 0x50
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	3301      	adds	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d3af      	bcc.n	800217a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	e044      	b.n	80022aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	3301      	adds	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d3b5      	bcc.n	8002220 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	687e      	ldr	r6, [r7, #4]
 80022bc:	466d      	mov	r5, sp
 80022be:	f106 0410 	add.w	r4, r6, #16
 80022c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d2:	1d33      	adds	r3, r6, #4
 80022d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f002 f81e 	bl	8004318 <USB_DevInit>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00d      	b.n	800230a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f002 f9cd 	bl	80046a2 <USB_DevDisconnect>

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e25b      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d075      	beq.n	800241e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002332:	4ba3      	ldr	r3, [pc, #652]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d00c      	beq.n	8002358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233e:	4ba0      	ldr	r3, [pc, #640]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002346:	2b08      	cmp	r3, #8
 8002348:	d112      	bne.n	8002370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234a:	4b9d      	ldr	r3, [pc, #628]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002356:	d10b      	bne.n	8002370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	4b99      	ldr	r3, [pc, #612]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d05b      	beq.n	800241c <HAL_RCC_OscConfig+0x108>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d157      	bne.n	800241c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e236      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x74>
 800237a:	4b91      	ldr	r3, [pc, #580]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a90      	ldr	r2, [pc, #576]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01d      	b.n	80023c4 <HAL_RCC_OscConfig+0xb0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x98>
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a8a      	ldr	r2, [pc, #552]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a87      	ldr	r2, [pc, #540]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xb0>
 80023ac:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a83      	ldr	r2, [pc, #524]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a80      	ldr	r2, [pc, #512]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff f820 	bl	8001410 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff f81c 	bl	8001410 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1fb      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0xc0>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff f80c 	bl	8001410 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff f808 	bl	8001410 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1e7      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	4b6c      	ldr	r3, [pc, #432]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0xe8>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d063      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242a:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002436:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243e:	2b08      	cmp	r3, #8
 8002440:	d11c      	bne.n	800247c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d116      	bne.n	800247c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_RCC_OscConfig+0x152>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1bb      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4952      	ldr	r1, [pc, #328]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	e03a      	b.n	80024f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002484:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_RCC_OscConfig+0x2b0>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe ffc1 	bl	8001410 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002492:	f7fe ffbd 	bl	8001410 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e19c      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4940      	ldr	r1, [pc, #256]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
 80024c4:	e015      	b.n	80024f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_OscConfig+0x2b0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe ffa0 	bl	8001410 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe ff9c 	bl	8001410 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e17b      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d030      	beq.n	8002560 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d016      	beq.n	8002534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCC_OscConfig+0x2b4>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe ff80 	bl	8001410 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002514:	f7fe ff7c 	bl	8001410 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e15b      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x200>
 8002532:	e015      	b.n	8002560 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x2b4>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7fe ff69 	bl	8001410 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002542:	f7fe ff65 	bl	8001410 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e144      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a0 	beq.w	80026ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_OscConfig+0x2b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d121      	bne.n	80025ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_RCC_OscConfig+0x2b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_RCC_OscConfig+0x2b8>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b6:	f7fe ff2b 	bl	8001410 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	e011      	b.n	80025e2 <HAL_RCC_OscConfig+0x2ce>
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470000 	.word	0x42470000
 80025c8:	42470e80 	.word	0x42470e80
 80025cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d0:	f7fe ff1e 	bl	8001410 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0fd      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	4b81      	ldr	r3, [pc, #516]	; (80027e8 <HAL_RCC_OscConfig+0x4d4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x2f0>
 80025f6:	4b7d      	ldr	r3, [pc, #500]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a7c      	ldr	r2, [pc, #496]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	e01c      	b.n	800263e <HAL_RCC_OscConfig+0x32a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0x312>
 800260c:	4b77      	ldr	r3, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a76      	ldr	r2, [pc, #472]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	4b74      	ldr	r3, [pc, #464]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a73      	ldr	r2, [pc, #460]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e00b      	b.n	800263e <HAL_RCC_OscConfig+0x32a>
 8002626:	4b71      	ldr	r3, [pc, #452]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a70      	ldr	r2, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
 8002632:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a6d      	ldr	r2, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fee3 	bl	8001410 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fedf 	bl	8001410 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0bc      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	4b61      	ldr	r3, [pc, #388]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ee      	beq.n	800264e <HAL_RCC_OscConfig+0x33a>
 8002670:	e014      	b.n	800269c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002672:	f7fe fecd 	bl	8001410 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe fec9 	bl	8001410 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0a6      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	4b56      	ldr	r3, [pc, #344]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ee      	bne.n	800267a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b52      	ldr	r3, [pc, #328]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a51      	ldr	r2, [pc, #324]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8092 	beq.w	80027dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b8:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d05c      	beq.n	800277e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d141      	bne.n	8002750 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <HAL_RCC_OscConfig+0x4dc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fe9d 	bl	8001410 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe fe99 	bl	8001410 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e078      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ec:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	019b      	lsls	r3, r3, #6
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	3b01      	subs	r3, #1
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	4933      	ldr	r1, [pc, #204]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002722:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <HAL_RCC_OscConfig+0x4dc>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fe72 	bl	8001410 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fe6e 	bl	8001410 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e04d      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x41c>
 800274e:	e045      	b.n	80027dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_RCC_OscConfig+0x4dc>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe fe5b 	bl	8001410 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe fe57 	bl	8001410 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e036      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002770:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x44a>
 800277c:	e02e      	b.n	80027dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e029      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800278a:	4b18      	ldr	r3, [pc, #96]	; (80027ec <HAL_RCC_OscConfig+0x4d8>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	429a      	cmp	r2, r3
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d115      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d106      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40007000 	.word	0x40007000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	42470060 	.word	0x42470060

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0cc      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b68      	ldr	r3, [pc, #416]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d90c      	bls.n	8002830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b65      	ldr	r3, [pc, #404]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0b8      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002848:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002860:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800286a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b50      	ldr	r3, [pc, #320]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	494d      	ldr	r1, [pc, #308]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d044      	beq.n	8002914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b47      	ldr	r3, [pc, #284]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d119      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e07f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e06f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e067      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4934      	ldr	r1, [pc, #208]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e4:	f7fe fd94 	bl	8001410 <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f7fe fd90 	bl	8001410 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e04f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 020c 	and.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d1eb      	bne.n	80028ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d20c      	bcs.n	800293c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e032      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4916      	ldr	r1, [pc, #88]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800297a:	f000 f821 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800297e:	4601      	mov	r1, r0
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	fa21 f303 	lsr.w	r3, r1, r3
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fcf4 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08007684 	.word	0x08007684
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	2300      	movs	r3, #0
 80029d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d007      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x32>
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d008      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x38>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 80b4 	bne.w	8002b54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b5e      	ldr	r3, [pc, #376]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ee:	60bb      	str	r3, [r7, #8]
       break;
 80029f0:	e0b3      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029f4:	60bb      	str	r3, [r7, #8]
      break;
 80029f6:	e0b0      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f8:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a02:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d04a      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	f04f 0400 	mov.w	r4, #0
 8002a18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	ea03 0501 	and.w	r5, r3, r1
 8002a24:	ea04 0602 	and.w	r6, r4, r2
 8002a28:	4629      	mov	r1, r5
 8002a2a:	4632      	mov	r2, r6
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	f04f 0400 	mov.w	r4, #0
 8002a34:	0154      	lsls	r4, r2, #5
 8002a36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a3a:	014b      	lsls	r3, r1, #5
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4622      	mov	r2, r4
 8002a40:	1b49      	subs	r1, r1, r5
 8002a42:	eb62 0206 	sbc.w	r2, r2, r6
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	f04f 0400 	mov.w	r4, #0
 8002a4e:	0194      	lsls	r4, r2, #6
 8002a50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a54:	018b      	lsls	r3, r1, #6
 8002a56:	1a5b      	subs	r3, r3, r1
 8002a58:	eb64 0402 	sbc.w	r4, r4, r2
 8002a5c:	f04f 0100 	mov.w	r1, #0
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	00e2      	lsls	r2, r4, #3
 8002a66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a6a:	00d9      	lsls	r1, r3, #3
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4614      	mov	r4, r2
 8002a70:	195b      	adds	r3, r3, r5
 8002a72:	eb44 0406 	adc.w	r4, r4, r6
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	02a2      	lsls	r2, r4, #10
 8002a80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a84:	0299      	lsls	r1, r3, #10
 8002a86:	460b      	mov	r3, r1
 8002a88:	4614      	mov	r4, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f04f 0400 	mov.w	r4, #0
 8002a94:	461a      	mov	r2, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	f7fd fba2 	bl	80001e0 <__aeabi_uldivmod>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e049      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	f04f 0400 	mov.w	r4, #0
 8002aae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	ea03 0501 	and.w	r5, r3, r1
 8002aba:	ea04 0602 	and.w	r6, r4, r2
 8002abe:	4629      	mov	r1, r5
 8002ac0:	4632      	mov	r2, r6
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	f04f 0400 	mov.w	r4, #0
 8002aca:	0154      	lsls	r4, r2, #5
 8002acc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ad0:	014b      	lsls	r3, r1, #5
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	1b49      	subs	r1, r1, r5
 8002ad8:	eb62 0206 	sbc.w	r2, r2, r6
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	f04f 0400 	mov.w	r4, #0
 8002ae4:	0194      	lsls	r4, r2, #6
 8002ae6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aea:	018b      	lsls	r3, r1, #6
 8002aec:	1a5b      	subs	r3, r3, r1
 8002aee:	eb64 0402 	sbc.w	r4, r4, r2
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	00e2      	lsls	r2, r4, #3
 8002afc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b00:	00d9      	lsls	r1, r3, #3
 8002b02:	460b      	mov	r3, r1
 8002b04:	4614      	mov	r4, r2
 8002b06:	195b      	adds	r3, r3, r5
 8002b08:	eb44 0406 	adc.w	r4, r4, r6
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	02a2      	lsls	r2, r4, #10
 8002b16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b1a:	0299      	lsls	r1, r3, #10
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4614      	mov	r4, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	4621      	mov	r1, r4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f04f 0400 	mov.w	r4, #0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	f7fd fb57 	bl	80001e0 <__aeabi_uldivmod>
 8002b32:	4603      	mov	r3, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	3301      	adds	r3, #1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	60bb      	str	r3, [r7, #8]
      break;
 8002b52:	e002      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b56:	60bb      	str	r3, [r7, #8]
      break;
 8002b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	00f42400 	.word	0x00f42400

08002b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000

08002b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b88:	f7ff fff0 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0a9b      	lsrs	r3, r3, #10
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4a03      	ldr	r2, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	08007694 	.word	0x08007694

08002bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bb0:	f7ff ffdc 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002bb4:	4601      	mov	r1, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0b5b      	lsrs	r3, r3, #13
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc2:	5cd3      	ldrb	r3, [r2, r3]
 8002bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08007694 	.word	0x08007694

08002bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e056      	b.n	8002c94 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fe f98f 	bl	8000f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	ea42 0103 	orr.w	r1, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	f003 0104 	and.w	r1, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e01d      	b.n	8002cea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe f9ac 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f000 fa18 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e01d      	b.n	8002d40 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f815 	bl	8002d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f000 f9ed 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e01d      	b.n	8002daa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f815 	bl	8002db2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 f9b8 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e08a      	b.n	8002ef6 <HAL_TIM_IC_ConfigChannel+0x130>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11b      	bne.n	8002e2e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f000 fc15 	bl	8003634 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 020c 	bic.w	r2, r2, #12
 8002e18:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6999      	ldr	r1, [r3, #24]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	619a      	str	r2, [r3, #24]
 8002e2c:	e05a      	b.n	8002ee4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d11c      	bne.n	8002e6e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f000 fc8d 	bl	8003762 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e56:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	021a      	lsls	r2, r3, #8
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	619a      	str	r2, [r3, #24]
 8002e6c:	e03a      	b.n	8002ee4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	6819      	ldr	r1, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f000 fcda 	bl	800383c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 020c 	bic.w	r2, r2, #12
 8002e96:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69d9      	ldr	r1, [r3, #28]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	61da      	str	r2, [r3, #28]
 8002eaa:	e01b      	b.n	8002ee4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f000 fcfa 	bl	80038b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ece:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69d9      	ldr	r1, [r3, #28]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	021a      	lsls	r2, r3, #8
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0b4      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	f200 809f 	bhi.w	8003070 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08003071 	.word	0x08003071
 8002f40:	08003071 	.word	0x08003071
 8002f44:	08003071 	.word	0x08003071
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	08003071 	.word	0x08003071
 8002f50:	08003071 	.word	0x08003071
 8002f54:	08003071 	.word	0x08003071
 8002f58:	08002fef 	.word	0x08002fef
 8002f5c:	08003071 	.word	0x08003071
 8002f60:	08003071 	.word	0x08003071
 8002f64:	08003071 	.word	0x08003071
 8002f68:	0800302f 	.word	0x0800302f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f94c 	bl	8003210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0208 	orr.w	r2, r2, #8
 8002f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6999      	ldr	r1, [r3, #24]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	619a      	str	r2, [r3, #24]
      break;
 8002faa:	e062      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f992 	bl	80032dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6999      	ldr	r1, [r3, #24]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	021a      	lsls	r2, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	619a      	str	r2, [r3, #24]
      break;
 8002fec:	e041      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f9dd 	bl	80033b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0208 	orr.w	r2, r2, #8
 8003008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0204 	bic.w	r2, r2, #4
 8003018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69d9      	ldr	r1, [r3, #28]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	61da      	str	r2, [r3, #28]
      break;
 800302c:	e021      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fa27 	bl	8003488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	021a      	lsls	r2, r3, #8
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	61da      	str	r2, [r3, #28]
      break;
 800306e:	e000      	b.n	8003072 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003070:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e031      	b.n	8003108 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80030b4:	6839      	ldr	r1, [r7, #0]
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fa36 	bl	8003528 <TIM_SlaveTimer_SetConfig>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e018      	b.n	8003108 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a34      	ldr	r2, [pc, #208]	; (80031f4 <TIM_Base_SetConfig+0xe4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00f      	beq.n	8003148 <TIM_Base_SetConfig+0x38>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d00b      	beq.n	8003148 <TIM_Base_SetConfig+0x38>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a31      	ldr	r2, [pc, #196]	; (80031f8 <TIM_Base_SetConfig+0xe8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d007      	beq.n	8003148 <TIM_Base_SetConfig+0x38>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a30      	ldr	r2, [pc, #192]	; (80031fc <TIM_Base_SetConfig+0xec>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <TIM_Base_SetConfig+0x38>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <TIM_Base_SetConfig+0xf0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d108      	bne.n	800315a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <TIM_Base_SetConfig+0xe4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01b      	beq.n	800319a <TIM_Base_SetConfig+0x8a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003168:	d017      	beq.n	800319a <TIM_Base_SetConfig+0x8a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a22      	ldr	r2, [pc, #136]	; (80031f8 <TIM_Base_SetConfig+0xe8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <TIM_Base_SetConfig+0x8a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <TIM_Base_SetConfig+0xec>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00f      	beq.n	800319a <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <TIM_Base_SetConfig+0xf0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <TIM_Base_SetConfig+0xf4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <TIM_Base_SetConfig+0xf8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <TIM_Base_SetConfig+0xfc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a08      	ldr	r2, [pc, #32]	; (80031f4 <TIM_Base_SetConfig+0xe4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d103      	bne.n	80031e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	615a      	str	r2, [r3, #20]
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40010000 	.word	0x40010000
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800
 8003200:	40000c00 	.word	0x40000c00
 8003204:	40014000 	.word	0x40014000
 8003208:	40014400 	.word	0x40014400
 800320c:	40014800 	.word	0x40014800

08003210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f023 0201 	bic.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 0302 	bic.w	r3, r3, #2
 8003258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <TIM_OC1_SetConfig+0xc8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10c      	bne.n	8003286 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0308 	bic.w	r3, r3, #8
 8003272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <TIM_OC1_SetConfig+0xc8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d111      	bne.n	80032b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800329c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	621a      	str	r2, [r3, #32]
}
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40010000 	.word	0x40010000

080032dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0210 	bic.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0320 	bic.w	r3, r3, #32
 8003326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <TIM_OC2_SetConfig+0xd4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d10d      	bne.n	8003358 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <TIM_OC2_SetConfig+0xd4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d113      	bne.n	8003388 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800336e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40010000 	.word	0x40010000

080033b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <TIM_OC3_SetConfig+0xd0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10d      	bne.n	800342e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <TIM_OC3_SetConfig+0xd0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d113      	bne.n	800345e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800343c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40010000 	.word	0x40010000

08003488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	031b      	lsls	r3, r3, #12
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <TIM_OC4_SetConfig+0x9c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d109      	bne.n	80034fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	019b      	lsls	r3, r3, #6
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	621a      	str	r2, [r3, #32]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000

08003528 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003540:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f023 0307 	bic.w	r3, r3, #7
 8003552:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b30      	cmp	r3, #48	; 0x30
 800356c:	d05c      	beq.n	8003628 <TIM_SlaveTimer_SetConfig+0x100>
 800356e:	2b30      	cmp	r3, #48	; 0x30
 8003570:	d806      	bhi.n	8003580 <TIM_SlaveTimer_SetConfig+0x58>
 8003572:	2b10      	cmp	r3, #16
 8003574:	d058      	beq.n	8003628 <TIM_SlaveTimer_SetConfig+0x100>
 8003576:	2b20      	cmp	r3, #32
 8003578:	d056      	beq.n	8003628 <TIM_SlaveTimer_SetConfig+0x100>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d054      	beq.n	8003628 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800357e:	e054      	b.n	800362a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8003580:	2b50      	cmp	r3, #80	; 0x50
 8003582:	d03d      	beq.n	8003600 <TIM_SlaveTimer_SetConfig+0xd8>
 8003584:	2b50      	cmp	r3, #80	; 0x50
 8003586:	d802      	bhi.n	800358e <TIM_SlaveTimer_SetConfig+0x66>
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d010      	beq.n	80035ae <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800358c:	e04d      	b.n	800362a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800358e:	2b60      	cmp	r3, #96	; 0x60
 8003590:	d040      	beq.n	8003614 <TIM_SlaveTimer_SetConfig+0xec>
 8003592:	2b70      	cmp	r3, #112	; 0x70
 8003594:	d000      	beq.n	8003598 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8003596:	e048      	b.n	800362a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68d9      	ldr	r1, [r3, #12]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f000 f9c1 	bl	800392e <TIM_ETR_SetConfig>
      break;
 80035ac:	e03d      	b.n	800362a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d101      	bne.n	80035ba <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e038      	b.n	800362c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6a1a      	ldr	r2, [r3, #32]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035e0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	621a      	str	r2, [r3, #32]
      break;
 80035fe:	e014      	b.n	800362a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	461a      	mov	r2, r3
 800360e:	f000 f879 	bl	8003704 <TIM_TI1_ConfigInputStage>
      break;
 8003612:	e00a      	b.n	800362a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	461a      	mov	r2, r3
 8003622:	f000 f8db 	bl	80037dc <TIM_TI2_ConfigInputStage>
      break;
 8003626:	e000      	b.n	800362a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8003628:	bf00      	nop
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0201 	bic.w	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <TIM_TI1_SetConfig+0xbc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <TIM_TI1_SetConfig+0x56>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d00f      	beq.n	800368a <TIM_TI1_SetConfig+0x56>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <TIM_TI1_SetConfig+0xc0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00b      	beq.n	800368a <TIM_TI1_SetConfig+0x56>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <TIM_TI1_SetConfig+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <TIM_TI1_SetConfig+0x56>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <TIM_TI1_SetConfig+0xc8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <TIM_TI1_SetConfig+0x56>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <TIM_TI1_SetConfig+0xcc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <TIM_TI1_SetConfig+0x5a>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <TIM_TI1_SetConfig+0x5c>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e003      	b.n	80036ae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f023 030a 	bic.w	r3, r3, #10
 80036c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f003 030a 	and.w	r3, r3, #10
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40014000 	.word	0x40014000

08003704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 030a 	bic.w	r3, r3, #10
 8003740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003762:	b480      	push	{r7}
 8003764:	b087      	sub	sp, #28
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f023 0210 	bic.w	r2, r3, #16
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	031b      	lsls	r3, r3, #12
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f023 0210 	bic.w	r2, r3, #16
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003806:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	031b      	lsls	r3, r3, #12
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003818:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 0303 	bic.w	r3, r3, #3
 8003868:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003878:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	b2db      	uxtb	r3, r3
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800388c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	621a      	str	r2, [r3, #32]
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003906:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	031b      	lsls	r3, r3, #12
 800390c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003948:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003984:	2302      	movs	r3, #2
 8003986:	e050      	b.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d018      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d013      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d10c      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40014000 	.word	0x40014000

08003a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e03f      	b.n	8003ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fb6a 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f829 	bl	8003ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b2a:	f023 030c 	bic.w	r3, r3, #12
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b56:	f040 818b 	bne.w	8003e70 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4ac1      	ldr	r2, [pc, #772]	; (8003e64 <UART_SetConfig+0x37c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d005      	beq.n	8003b70 <UART_SetConfig+0x88>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4abf      	ldr	r2, [pc, #764]	; (8003e68 <UART_SetConfig+0x380>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	f040 80bd 	bne.w	8003cea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b70:	f7ff f81c 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8003b74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	461d      	mov	r5, r3
 8003b7a:	f04f 0600 	mov.w	r6, #0
 8003b7e:	46a8      	mov	r8, r5
 8003b80:	46b1      	mov	r9, r6
 8003b82:	eb18 0308 	adds.w	r3, r8, r8
 8003b86:	eb49 0409 	adc.w	r4, r9, r9
 8003b8a:	4698      	mov	r8, r3
 8003b8c:	46a1      	mov	r9, r4
 8003b8e:	eb18 0805 	adds.w	r8, r8, r5
 8003b92:	eb49 0906 	adc.w	r9, r9, r6
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ba2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ba6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003baa:	4688      	mov	r8, r1
 8003bac:	4691      	mov	r9, r2
 8003bae:	eb18 0005 	adds.w	r0, r8, r5
 8003bb2:	eb49 0106 	adc.w	r1, r9, r6
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	461d      	mov	r5, r3
 8003bbc:	f04f 0600 	mov.w	r6, #0
 8003bc0:	196b      	adds	r3, r5, r5
 8003bc2:	eb46 0406 	adc.w	r4, r6, r6
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4623      	mov	r3, r4
 8003bca:	f7fc fb09 	bl	80001e0 <__aeabi_uldivmod>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4ba5      	ldr	r3, [pc, #660]	; (8003e6c <UART_SetConfig+0x384>)
 8003bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	461d      	mov	r5, r3
 8003be4:	f04f 0600 	mov.w	r6, #0
 8003be8:	46a9      	mov	r9, r5
 8003bea:	46b2      	mov	sl, r6
 8003bec:	eb19 0309 	adds.w	r3, r9, r9
 8003bf0:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf4:	4699      	mov	r9, r3
 8003bf6:	46a2      	mov	sl, r4
 8003bf8:	eb19 0905 	adds.w	r9, r9, r5
 8003bfc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c14:	4689      	mov	r9, r1
 8003c16:	4692      	mov	sl, r2
 8003c18:	eb19 0005 	adds.w	r0, r9, r5
 8003c1c:	eb4a 0106 	adc.w	r1, sl, r6
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	461d      	mov	r5, r3
 8003c26:	f04f 0600 	mov.w	r6, #0
 8003c2a:	196b      	adds	r3, r5, r5
 8003c2c:	eb46 0406 	adc.w	r4, r6, r6
 8003c30:	461a      	mov	r2, r3
 8003c32:	4623      	mov	r3, r4
 8003c34:	f7fc fad4 	bl	80001e0 <__aeabi_uldivmod>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b8b      	ldr	r3, [pc, #556]	; (8003e6c <UART_SetConfig+0x384>)
 8003c40:	fba3 1302 	umull	r1, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	2164      	movs	r1, #100	; 0x64
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	3332      	adds	r3, #50	; 0x32
 8003c52:	4a86      	ldr	r2, [pc, #536]	; (8003e6c <UART_SetConfig+0x384>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c60:	4498      	add	r8, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	461d      	mov	r5, r3
 8003c66:	f04f 0600 	mov.w	r6, #0
 8003c6a:	46a9      	mov	r9, r5
 8003c6c:	46b2      	mov	sl, r6
 8003c6e:	eb19 0309 	adds.w	r3, r9, r9
 8003c72:	eb4a 040a 	adc.w	r4, sl, sl
 8003c76:	4699      	mov	r9, r3
 8003c78:	46a2      	mov	sl, r4
 8003c7a:	eb19 0905 	adds.w	r9, r9, r5
 8003c7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c96:	4689      	mov	r9, r1
 8003c98:	4692      	mov	sl, r2
 8003c9a:	eb19 0005 	adds.w	r0, r9, r5
 8003c9e:	eb4a 0106 	adc.w	r1, sl, r6
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	f04f 0600 	mov.w	r6, #0
 8003cac:	196b      	adds	r3, r5, r5
 8003cae:	eb46 0406 	adc.w	r4, r6, r6
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	f7fc fa93 	bl	80001e0 <__aeabi_uldivmod>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <UART_SetConfig+0x384>)
 8003cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2164      	movs	r1, #100	; 0x64
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	3332      	adds	r3, #50	; 0x32
 8003cd4:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <UART_SetConfig+0x384>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	f003 0207 	and.w	r2, r3, #7
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4442      	add	r2, r8
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	e26f      	b.n	80041ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cea:	f7fe ff4b 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8003cee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	f04f 0600 	mov.w	r6, #0
 8003cf8:	46a8      	mov	r8, r5
 8003cfa:	46b1      	mov	r9, r6
 8003cfc:	eb18 0308 	adds.w	r3, r8, r8
 8003d00:	eb49 0409 	adc.w	r4, r9, r9
 8003d04:	4698      	mov	r8, r3
 8003d06:	46a1      	mov	r9, r4
 8003d08:	eb18 0805 	adds.w	r8, r8, r5
 8003d0c:	eb49 0906 	adc.w	r9, r9, r6
 8003d10:	f04f 0100 	mov.w	r1, #0
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d24:	4688      	mov	r8, r1
 8003d26:	4691      	mov	r9, r2
 8003d28:	eb18 0005 	adds.w	r0, r8, r5
 8003d2c:	eb49 0106 	adc.w	r1, r9, r6
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	461d      	mov	r5, r3
 8003d36:	f04f 0600 	mov.w	r6, #0
 8003d3a:	196b      	adds	r3, r5, r5
 8003d3c:	eb46 0406 	adc.w	r4, r6, r6
 8003d40:	461a      	mov	r2, r3
 8003d42:	4623      	mov	r3, r4
 8003d44:	f7fc fa4c 	bl	80001e0 <__aeabi_uldivmod>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <UART_SetConfig+0x384>)
 8003d50:	fba3 2302 	umull	r2, r3, r3, r2
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	461d      	mov	r5, r3
 8003d5e:	f04f 0600 	mov.w	r6, #0
 8003d62:	46a9      	mov	r9, r5
 8003d64:	46b2      	mov	sl, r6
 8003d66:	eb19 0309 	adds.w	r3, r9, r9
 8003d6a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d6e:	4699      	mov	r9, r3
 8003d70:	46a2      	mov	sl, r4
 8003d72:	eb19 0905 	adds.w	r9, r9, r5
 8003d76:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d8e:	4689      	mov	r9, r1
 8003d90:	4692      	mov	sl, r2
 8003d92:	eb19 0005 	adds.w	r0, r9, r5
 8003d96:	eb4a 0106 	adc.w	r1, sl, r6
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	461d      	mov	r5, r3
 8003da0:	f04f 0600 	mov.w	r6, #0
 8003da4:	196b      	adds	r3, r5, r5
 8003da6:	eb46 0406 	adc.w	r4, r6, r6
 8003daa:	461a      	mov	r2, r3
 8003dac:	4623      	mov	r3, r4
 8003dae:	f7fc fa17 	bl	80001e0 <__aeabi_uldivmod>
 8003db2:	4603      	mov	r3, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <UART_SetConfig+0x384>)
 8003dba:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2164      	movs	r1, #100	; 0x64
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	3332      	adds	r3, #50	; 0x32
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <UART_SetConfig+0x384>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dda:	4498      	add	r8, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	461d      	mov	r5, r3
 8003de0:	f04f 0600 	mov.w	r6, #0
 8003de4:	46a9      	mov	r9, r5
 8003de6:	46b2      	mov	sl, r6
 8003de8:	eb19 0309 	adds.w	r3, r9, r9
 8003dec:	eb4a 040a 	adc.w	r4, sl, sl
 8003df0:	4699      	mov	r9, r3
 8003df2:	46a2      	mov	sl, r4
 8003df4:	eb19 0905 	adds.w	r9, r9, r5
 8003df8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e10:	4689      	mov	r9, r1
 8003e12:	4692      	mov	sl, r2
 8003e14:	eb19 0005 	adds.w	r0, r9, r5
 8003e18:	eb4a 0106 	adc.w	r1, sl, r6
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	461d      	mov	r5, r3
 8003e22:	f04f 0600 	mov.w	r6, #0
 8003e26:	196b      	adds	r3, r5, r5
 8003e28:	eb46 0406 	adc.w	r4, r6, r6
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4623      	mov	r3, r4
 8003e30:	f7fc f9d6 	bl	80001e0 <__aeabi_uldivmod>
 8003e34:	4603      	mov	r3, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <UART_SetConfig+0x384>)
 8003e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	3332      	adds	r3, #50	; 0x32
 8003e4e:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <UART_SetConfig+0x384>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	f003 0207 	and.w	r2, r3, #7
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4442      	add	r2, r8
 8003e60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e62:	e1b2      	b.n	80041ca <UART_SetConfig+0x6e2>
 8003e64:	40011000 	.word	0x40011000
 8003e68:	40011400 	.word	0x40011400
 8003e6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4ad7      	ldr	r2, [pc, #860]	; (80041d4 <UART_SetConfig+0x6ec>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d005      	beq.n	8003e86 <UART_SetConfig+0x39e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4ad6      	ldr	r2, [pc, #856]	; (80041d8 <UART_SetConfig+0x6f0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	f040 80d1 	bne.w	8004028 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e86:	f7fe fe91 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8003e8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	469a      	mov	sl, r3
 8003e90:	f04f 0b00 	mov.w	fp, #0
 8003e94:	46d0      	mov	r8, sl
 8003e96:	46d9      	mov	r9, fp
 8003e98:	eb18 0308 	adds.w	r3, r8, r8
 8003e9c:	eb49 0409 	adc.w	r4, r9, r9
 8003ea0:	4698      	mov	r8, r3
 8003ea2:	46a1      	mov	r9, r4
 8003ea4:	eb18 080a 	adds.w	r8, r8, sl
 8003ea8:	eb49 090b 	adc.w	r9, r9, fp
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ebc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ec0:	4688      	mov	r8, r1
 8003ec2:	4691      	mov	r9, r2
 8003ec4:	eb1a 0508 	adds.w	r5, sl, r8
 8003ec8:	eb4b 0609 	adc.w	r6, fp, r9
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f04f 0400 	mov.w	r4, #0
 8003ede:	0094      	lsls	r4, r2, #2
 8003ee0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee4:	008b      	lsls	r3, r1, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	4631      	mov	r1, r6
 8003eee:	f7fc f977 	bl	80001e0 <__aeabi_uldivmod>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4bb8      	ldr	r3, [pc, #736]	; (80041dc <UART_SetConfig+0x6f4>)
 8003efa:	fba3 2302 	umull	r2, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	469b      	mov	fp, r3
 8003f08:	f04f 0c00 	mov.w	ip, #0
 8003f0c:	46d9      	mov	r9, fp
 8003f0e:	46e2      	mov	sl, ip
 8003f10:	eb19 0309 	adds.w	r3, r9, r9
 8003f14:	eb4a 040a 	adc.w	r4, sl, sl
 8003f18:	4699      	mov	r9, r3
 8003f1a:	46a2      	mov	sl, r4
 8003f1c:	eb19 090b 	adds.w	r9, r9, fp
 8003f20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f38:	4689      	mov	r9, r1
 8003f3a:	4692      	mov	sl, r2
 8003f3c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f40:	eb4c 060a 	adc.w	r6, ip, sl
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	0094      	lsls	r4, r2, #2
 8003f58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f5c:	008b      	lsls	r3, r1, #2
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4623      	mov	r3, r4
 8003f62:	4628      	mov	r0, r5
 8003f64:	4631      	mov	r1, r6
 8003f66:	f7fc f93b 	bl	80001e0 <__aeabi_uldivmod>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b9a      	ldr	r3, [pc, #616]	; (80041dc <UART_SetConfig+0x6f4>)
 8003f72:	fba3 1302 	umull	r1, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2164      	movs	r1, #100	; 0x64
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	3332      	adds	r3, #50	; 0x32
 8003f84:	4a95      	ldr	r2, [pc, #596]	; (80041dc <UART_SetConfig+0x6f4>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f90:	4498      	add	r8, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	469b      	mov	fp, r3
 8003f96:	f04f 0c00 	mov.w	ip, #0
 8003f9a:	46d9      	mov	r9, fp
 8003f9c:	46e2      	mov	sl, ip
 8003f9e:	eb19 0309 	adds.w	r3, r9, r9
 8003fa2:	eb4a 040a 	adc.w	r4, sl, sl
 8003fa6:	4699      	mov	r9, r3
 8003fa8:	46a2      	mov	sl, r4
 8003faa:	eb19 090b 	adds.w	r9, r9, fp
 8003fae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fc6:	4689      	mov	r9, r1
 8003fc8:	4692      	mov	sl, r2
 8003fca:	eb1b 0509 	adds.w	r5, fp, r9
 8003fce:	eb4c 060a 	adc.w	r6, ip, sl
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	f04f 0400 	mov.w	r4, #0
 8003fe4:	0094      	lsls	r4, r2, #2
 8003fe6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fea:	008b      	lsls	r3, r1, #2
 8003fec:	461a      	mov	r2, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	f7fc f8f4 	bl	80001e0 <__aeabi_uldivmod>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b77      	ldr	r3, [pc, #476]	; (80041dc <UART_SetConfig+0x6f4>)
 8004000:	fba3 1302 	umull	r1, r3, r3, r2
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	2164      	movs	r1, #100	; 0x64
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	3332      	adds	r3, #50	; 0x32
 8004012:	4a72      	ldr	r2, [pc, #456]	; (80041dc <UART_SetConfig+0x6f4>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	f003 020f 	and.w	r2, r3, #15
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4442      	add	r2, r8
 8004024:	609a      	str	r2, [r3, #8]
 8004026:	e0d0      	b.n	80041ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fdac 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 800402c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	469a      	mov	sl, r3
 8004032:	f04f 0b00 	mov.w	fp, #0
 8004036:	46d0      	mov	r8, sl
 8004038:	46d9      	mov	r9, fp
 800403a:	eb18 0308 	adds.w	r3, r8, r8
 800403e:	eb49 0409 	adc.w	r4, r9, r9
 8004042:	4698      	mov	r8, r3
 8004044:	46a1      	mov	r9, r4
 8004046:	eb18 080a 	adds.w	r8, r8, sl
 800404a:	eb49 090b 	adc.w	r9, r9, fp
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800405a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800405e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004062:	4688      	mov	r8, r1
 8004064:	4691      	mov	r9, r2
 8004066:	eb1a 0508 	adds.w	r5, sl, r8
 800406a:	eb4b 0609 	adc.w	r6, fp, r9
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4619      	mov	r1, r3
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	0094      	lsls	r4, r2, #2
 8004082:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004086:	008b      	lsls	r3, r1, #2
 8004088:	461a      	mov	r2, r3
 800408a:	4623      	mov	r3, r4
 800408c:	4628      	mov	r0, r5
 800408e:	4631      	mov	r1, r6
 8004090:	f7fc f8a6 	bl	80001e0 <__aeabi_uldivmod>
 8004094:	4603      	mov	r3, r0
 8004096:	460c      	mov	r4, r1
 8004098:	461a      	mov	r2, r3
 800409a:	4b50      	ldr	r3, [pc, #320]	; (80041dc <UART_SetConfig+0x6f4>)
 800409c:	fba3 2302 	umull	r2, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	469b      	mov	fp, r3
 80040aa:	f04f 0c00 	mov.w	ip, #0
 80040ae:	46d9      	mov	r9, fp
 80040b0:	46e2      	mov	sl, ip
 80040b2:	eb19 0309 	adds.w	r3, r9, r9
 80040b6:	eb4a 040a 	adc.w	r4, sl, sl
 80040ba:	4699      	mov	r9, r3
 80040bc:	46a2      	mov	sl, r4
 80040be:	eb19 090b 	adds.w	r9, r9, fp
 80040c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040da:	4689      	mov	r9, r1
 80040dc:	4692      	mov	sl, r2
 80040de:	eb1b 0509 	adds.w	r5, fp, r9
 80040e2:	eb4c 060a 	adc.w	r6, ip, sl
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	0094      	lsls	r4, r2, #2
 80040fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	4628      	mov	r0, r5
 8004106:	4631      	mov	r1, r6
 8004108:	f7fc f86a 	bl	80001e0 <__aeabi_uldivmod>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	461a      	mov	r2, r3
 8004112:	4b32      	ldr	r3, [pc, #200]	; (80041dc <UART_SetConfig+0x6f4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a2d      	ldr	r2, [pc, #180]	; (80041dc <UART_SetConfig+0x6f4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004132:	4498      	add	r8, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	469b      	mov	fp, r3
 8004138:	f04f 0c00 	mov.w	ip, #0
 800413c:	46d9      	mov	r9, fp
 800413e:	46e2      	mov	sl, ip
 8004140:	eb19 0309 	adds.w	r3, r9, r9
 8004144:	eb4a 040a 	adc.w	r4, sl, sl
 8004148:	4699      	mov	r9, r3
 800414a:	46a2      	mov	sl, r4
 800414c:	eb19 090b 	adds.w	r9, r9, fp
 8004150:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004160:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004164:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004168:	4689      	mov	r9, r1
 800416a:	4692      	mov	sl, r2
 800416c:	eb1b 0509 	adds.w	r5, fp, r9
 8004170:	eb4c 060a 	adc.w	r6, ip, sl
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4619      	mov	r1, r3
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	f04f 0400 	mov.w	r4, #0
 8004186:	0094      	lsls	r4, r2, #2
 8004188:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800418c:	008b      	lsls	r3, r1, #2
 800418e:	461a      	mov	r2, r3
 8004190:	4623      	mov	r3, r4
 8004192:	4628      	mov	r0, r5
 8004194:	4631      	mov	r1, r6
 8004196:	f7fc f823 	bl	80001e0 <__aeabi_uldivmod>
 800419a:	4603      	mov	r3, r0
 800419c:	460c      	mov	r4, r1
 800419e:	461a      	mov	r2, r3
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <UART_SetConfig+0x6f4>)
 80041a2:	fba3 1302 	umull	r1, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2164      	movs	r1, #100	; 0x64
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a09      	ldr	r2, [pc, #36]	; (80041dc <UART_SetConfig+0x6f4>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4442      	add	r2, r8
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	e7ff      	b.n	80041ca <UART_SetConfig+0x6e2>
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	40011000 	.word	0x40011000
 80041d8:	40011400 	.word	0x40011400
 80041dc:	51eb851f 	.word	0x51eb851f

080041e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041e0:	b084      	sub	sp, #16
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	f107 001c 	add.w	r0, r7, #28
 80041ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d122      	bne.n	800423e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800420c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa56 	bl	80046e4 <USB_CoreReset>
 8004238:	4603      	mov	r3, r0
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e01a      	b.n	8004274 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fa4a 	bl	80046e4 <USB_CoreReset>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
 8004266:	e005      	b.n	8004274 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10b      	bne.n	8004292 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f043 0206 	orr.w	r2, r3, #6
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800429e:	b004      	add	sp, #16
 80042a0:	4770      	bx	lr

080042a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 0201 	bic.w	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d106      	bne.n	80042f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	e00b      	b.n	8004308 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	e001      	b.n	8004308 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e003      	b.n	8004310 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004308:	2032      	movs	r0, #50	; 0x32
 800430a:	f7fd f88d 	bl	8001428 <HAL_Delay>

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004318:	b084      	sub	sp, #16
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e009      	b.n	800434c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3340      	adds	r3, #64	; 0x40
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	2200      	movs	r2, #0
 8004344:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3301      	adds	r3, #1
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b0e      	cmp	r3, #14
 8004350:	d9f2      	bls.n	8004338 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11c      	bne.n	8004392 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004366:	f043 0302 	orr.w	r3, r3, #2
 800436a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
 8004390:	e00b      	b.n	80043aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043b0:	461a      	mov	r2, r3
 80043b2:	2300      	movs	r3, #0
 80043b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043bc:	4619      	mov	r1, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	461a      	mov	r2, r3
 80043c6:	680b      	ldr	r3, [r1, #0]
 80043c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10c      	bne.n	80043ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043d6:	2100      	movs	r1, #0
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f949 	bl	8004670 <USB_SetDevSpeed>
 80043de:	e008      	b.n	80043f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043e0:	2101      	movs	r1, #1
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f944 	bl	8004670 <USB_SetDevSpeed>
 80043e8:	e003      	b.n	80043f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043ea:	2103      	movs	r1, #3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f93f 	bl	8004670 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043f2:	2110      	movs	r1, #16
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8f3 	bl	80045e0 <USB_FlushTxFifo>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f911 	bl	800462c <USB_FlushRxFifo>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	461a      	mov	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	461a      	mov	r2, r3
 8004428:	2300      	movs	r3, #0
 800442a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e043      	b.n	80044c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004454:	d118      	bne.n	8004488 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	461a      	mov	r2, r3
 800446a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	e013      	b.n	800449a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	461a      	mov	r2, r3
 8004480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e008      	b.n	800449a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	461a      	mov	r2, r3
 8004496:	2300      	movs	r3, #0
 8004498:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	461a      	mov	r2, r3
 80044a8:	2300      	movs	r3, #0
 80044aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b8:	461a      	mov	r2, r3
 80044ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3301      	adds	r3, #1
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3b7      	bcc.n	800443e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e043      	b.n	800455c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ea:	d118      	bne.n	800451e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	461a      	mov	r2, r3
 8004500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e013      	b.n	8004530 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	461a      	mov	r2, r3
 8004516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e008      	b.n	8004530 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452a:	461a      	mov	r2, r3
 800452c:	2300      	movs	r3, #0
 800452e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	2300      	movs	r3, #0
 8004540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	461a      	mov	r2, r3
 8004550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3301      	adds	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3b7      	bcc.n	80044d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004576:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004584:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	f043 0210 	orr.w	r2, r3, #16
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <USB_DevInit+0x2c4>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f043 0208 	orr.w	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d107      	bne.n	80045cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045d8:	b004      	add	sp, #16
 80045da:	4770      	bx	lr
 80045dc:	803c3800 	.word	0x803c3800

080045e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	019b      	lsls	r3, r3, #6
 80045f2:	f043 0220 	orr.w	r2, r3, #32
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a09      	ldr	r2, [pc, #36]	; (8004628 <USB_FlushTxFifo+0x48>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e006      	b.n	800461a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b20      	cmp	r3, #32
 8004616:	d0f0      	beq.n	80045fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	00030d40 	.word	0x00030d40

0800462c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2210      	movs	r2, #16
 800463c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <USB_FlushRxFifo+0x40>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e006      	b.n	800465e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d0f0      	beq.n	800463e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	00030d40 	.word	0x00030d40

08004670 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046bc:	f023 0303 	bic.w	r3, r3, #3
 80046c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a13      	ldr	r2, [pc, #76]	; (8004748 <USB_CoreReset+0x64>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e01b      	b.n	800473a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	daf2      	bge.n	80046f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f043 0201 	orr.w	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a09      	ldr	r2, [pc, #36]	; (8004748 <USB_CoreReset+0x64>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b01      	cmp	r3, #1
 8004736:	d0f0      	beq.n	800471a <USB_CoreReset+0x36>

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	00030d40 	.word	0x00030d40

0800474c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800475a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800475e:	2b84      	cmp	r3, #132	; 0x84
 8004760:	d005      	beq.n	800476e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	3303      	adds	r3, #3
 800476c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004782:	f3ef 8305 	mrs	r3, IPSR
 8004786:	607b      	str	r3, [r7, #4]
  return(result);
 8004788:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047a4:	f001 f828 	bl	80057f8 <vTaskStartScheduler>
  
  return osOK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	bd80      	pop	{r7, pc}

080047ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b0:	b089      	sub	sp, #36	; 0x24
 80047b2:	af04      	add	r7, sp, #16
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <osThreadCreate+0x54>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01c      	beq.n	8004802 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685c      	ldr	r4, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681d      	ldr	r5, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691e      	ldr	r6, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff ffb6 	bl	800474c <makeFreeRtosPriority>
 80047e0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ea:	9202      	str	r2, [sp, #8]
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	9100      	str	r1, [sp, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4632      	mov	r2, r6
 80047f4:	4629      	mov	r1, r5
 80047f6:	4620      	mov	r0, r4
 80047f8:	f000 fe38 	bl	800546c <xTaskCreateStatic>
 80047fc:	4603      	mov	r3, r0
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e01c      	b.n	800483c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685c      	ldr	r4, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800480e:	b29e      	uxth	r6, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff98 	bl	800474c <makeFreeRtosPriority>
 800481c:	4602      	mov	r2, r0
 800481e:	f107 030c 	add.w	r3, r7, #12
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	9200      	str	r2, [sp, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	4632      	mov	r2, r6
 800482a:	4629      	mov	r1, r5
 800482c:	4620      	mov	r0, r4
 800482e:	f000 fe77 	bl	8005520 <xTaskCreate>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800483c:	68fb      	ldr	r3, [r7, #12]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004846 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <osDelay+0x16>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	e000      	b.n	800485e <osDelay+0x18>
 800485c:	2301      	movs	r3, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f000 ff96 	bl	8005790 <vTaskDelay>
  
  return osOK;
 8004864:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	460b      	mov	r3, r1
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d013      	beq.n	80048ae <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8004886:	7afb      	ldrb	r3, [r7, #11]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <osTimerCreate+0x20>
 800488c:	2101      	movs	r1, #1
 800488e:	e000      	b.n	8004892 <osTimerCreate+0x22>
 8004890:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800489a:	9201      	str	r2, [sp, #4]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	460a      	mov	r2, r1
 80048a2:	2101      	movs	r1, #1
 80048a4:	480b      	ldr	r0, [pc, #44]	; (80048d4 <osTimerCreate+0x64>)
 80048a6:	f001 fe20 	bl	80064ea <xTimerCreateStatic>
 80048aa:	4603      	mov	r3, r0
 80048ac:	e00e      	b.n	80048cc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80048ae:	7afb      	ldrb	r3, [r7, #11]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <osTimerCreate+0x48>
 80048b4:	2201      	movs	r2, #1
 80048b6:	e000      	b.n	80048ba <osTimerCreate+0x4a>
 80048b8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2101      	movs	r1, #1
 80048c4:	4803      	ldr	r0, [pc, #12]	; (80048d4 <osTimerCreate+0x64>)
 80048c6:	f001 fdef 	bl	80064a8 <xTimerCreate>
 80048ca:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	08007668 	.word	0x08007668

080048d8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <osTimerStart+0x20>
    ticks = 1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80048f8:	f7ff ff40 	bl	800477c <inHandlerMode>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01b      	beq.n	800493a <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8004902:	f107 020c 	add.w	r2, r7, #12
 8004906:	2300      	movs	r3, #0
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4613      	mov	r3, r2
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	2109      	movs	r1, #9
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 fe61 	bl	80065d8 <xTimerGenericCommand>
 8004916:	4603      	mov	r3, r0
 8004918:	2b01      	cmp	r3, #1
 800491a:	d002      	beq.n	8004922 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 800491c:	23ff      	movs	r3, #255	; 0xff
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	e018      	b.n	8004954 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d015      	beq.n	8004954 <osTimerStart+0x7c>
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <osTimerStart+0x88>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	e00c      	b.n	8004954 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800493a:	2300      	movs	r3, #0
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	2300      	movs	r3, #0
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	2104      	movs	r1, #4
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 fe47 	bl	80065d8 <xTimerGenericCommand>
 800494a:	4603      	mov	r3, r0
 800494c:	2b01      	cmp	r3, #1
 800494e:	d001      	beq.n	8004954 <osTimerStart+0x7c>
      result = osErrorOS;
 8004950:	23ff      	movs	r3, #255	; 0xff
 8004952:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8004954:	697b      	ldr	r3, [r7, #20]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f103 0208 	add.w	r2, r3, #8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800497c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f103 0208 	add.w	r2, r3, #8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f103 0208 	add.w	r2, r3, #8
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a1c:	d103      	bne.n	8004a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e00c      	b.n	8004a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3308      	adds	r3, #8
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e002      	b.n	8004a34 <vListInsert+0x2e>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d2f6      	bcs.n	8004a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	601a      	str	r2, [r3, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6892      	ldr	r2, [r2, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6852      	ldr	r2, [r2, #4]
 8004a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d103      	bne.n	8004aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1e5a      	subs	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	e7fe      	b.n	8004af2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004af4:	f002 f97a 	bl	8006dec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b00:	68f9      	ldr	r1, [r7, #12]
 8004b02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	441a      	add	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	3b01      	subs	r3, #1
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	441a      	add	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	22ff      	movs	r2, #255	; 0xff
 8004b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	22ff      	movs	r2, #255	; 0xff
 8004b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d114      	bne.n	8004b74 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01a      	beq.n	8004b88 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3310      	adds	r3, #16
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 f94a 	bl	8005df0 <xTaskRemoveFromEventList>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d012      	beq.n	8004b88 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <xQueueGenericReset+0xcc>)
 8004b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	e009      	b.n	8004b88 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3310      	adds	r3, #16
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fef3 	bl	8004964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3324      	adds	r3, #36	; 0x24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff feee 	bl	8004964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b88:	f002 f95e 	bl	8006e48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b8c:	2301      	movs	r3, #1
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	; 0x38
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <xQueueGenericCreateStatic+0x28>
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc2:	e7fe      	b.n	8004bc2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <xQueueGenericCreateStatic+0x42>
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <xQueueGenericCreateStatic+0x4e>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <xQueueGenericCreateStatic+0x52>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xQueueGenericCreateStatic+0x54>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <xQueueGenericCreateStatic+0x6c>
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	623b      	str	r3, [r7, #32]
 8004c06:	e7fe      	b.n	8004c06 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <xQueueGenericCreateStatic+0x78>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <xQueueGenericCreateStatic+0x7c>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <xQueueGenericCreateStatic+0x7e>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <xQueueGenericCreateStatic+0x96>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e7fe      	b.n	8004c30 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c32:	2348      	movs	r3, #72	; 0x48
 8004c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b48      	cmp	r3, #72	; 0x48
 8004c3a:	d009      	beq.n	8004c50 <xQueueGenericCreateStatic+0xb4>
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e7fe      	b.n	8004c4e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f805 	bl	8004c82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3730      	adds	r7, #48	; 0x30
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e002      	b.n	8004ca4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	69b8      	ldr	r0, [r7, #24]
 8004cb4:	f7ff ff0a 	bl	8004acc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08e      	sub	sp, #56	; 0x38
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <xQueueGenericSend+0x30>
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cee:	e7fe      	b.n	8004cee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d103      	bne.n	8004cfe <xQueueGenericSend+0x3e>
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <xQueueGenericSend+0x42>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <xQueueGenericSend+0x44>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <xQueueGenericSend+0x5c>
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e7fe      	b.n	8004d1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d103      	bne.n	8004d2a <xQueueGenericSend+0x6a>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <xQueueGenericSend+0x6e>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <xQueueGenericSend+0x70>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <xQueueGenericSend+0x88>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	e7fe      	b.n	8004d46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d48:	f001 fa5e 	bl	8006208 <xTaskGetSchedulerState>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <xQueueGenericSend+0x98>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <xQueueGenericSend+0x9c>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <xQueueGenericSend+0x9e>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <xQueueGenericSend+0xb6>
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	e7fe      	b.n	8004d74 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d76:	f002 f839 	bl	8006dec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <xQueueGenericSend+0xcc>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d129      	bne.n	8004de0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d92:	f000 f9ff 	bl	8005194 <prvCopyDataToQueue>
 8004d96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d010      	beq.n	8004dc2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	3324      	adds	r3, #36	; 0x24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f001 f823 	bl	8005df0 <xTaskRemoveFromEventList>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004db0:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <xQueueGenericSend+0x1f0>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	e00a      	b.n	8004dd8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004dc8:	4b39      	ldr	r3, [pc, #228]	; (8004eb0 <xQueueGenericSend+0x1f0>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dd8:	f002 f836 	bl	8006e48 <vPortExitCritical>
				return pdPASS;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e063      	b.n	8004ea8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004de6:	f002 f82f 	bl	8006e48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e05c      	b.n	8004ea8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004df4:	f107 0314 	add.w	r3, r7, #20
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 f85d 	bl	8005eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e02:	f002 f821 	bl	8006e48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e06:	f000 fd5d 	bl	80058c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e0a:	f001 ffef 	bl	8006dec <vPortEnterCritical>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e14:	b25b      	sxtb	r3, r3
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e1a:	d103      	bne.n	8004e24 <xQueueGenericSend+0x164>
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2a:	b25b      	sxtb	r3, r3
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e30:	d103      	bne.n	8004e3a <xQueueGenericSend+0x17a>
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e3a:	f002 f805 	bl	8006e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e3e:	1d3a      	adds	r2, r7, #4
 8004e40:	f107 0314 	add.w	r3, r7, #20
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 f84c 	bl	8005ee4 <xTaskCheckForTimeOut>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d124      	bne.n	8004e9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e54:	f000 fa96 	bl	8005384 <prvIsQueueFull>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d018      	beq.n	8004e90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	3310      	adds	r3, #16
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 ff74 	bl	8005d54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e6e:	f000 fa21 	bl	80052b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e72:	f000 fd6f 	bl	8005954 <xTaskResumeAll>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f47f af7c 	bne.w	8004d76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <xQueueGenericSend+0x1f0>)
 8004e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	e772      	b.n	8004d76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e92:	f000 fa0f 	bl	80052b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e96:	f000 fd5d 	bl	8005954 <xTaskResumeAll>
 8004e9a:	e76c      	b.n	8004d76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e9e:	f000 fa09 	bl	80052b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ea2:	f000 fd57 	bl	8005954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ea6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3738      	adds	r7, #56	; 0x38
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08e      	sub	sp, #56	; 0x38
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <xQueueGenericSendFromISR+0x2c>
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ede:	e7fe      	b.n	8004ede <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <xQueueGenericSendFromISR+0x3a>
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <xQueueGenericSendFromISR+0x3e>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <xQueueGenericSendFromISR+0x40>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <xQueueGenericSendFromISR+0x58>
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	623b      	str	r3, [r7, #32]
 8004f0a:	e7fe      	b.n	8004f0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d103      	bne.n	8004f1a <xQueueGenericSendFromISR+0x66>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <xQueueGenericSendFromISR+0x6a>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <xQueueGenericSendFromISR+0x6c>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <xQueueGenericSendFromISR+0x84>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e7fe      	b.n	8004f36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f38:	f002 f918 	bl	800716c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f3c:	f3ef 8211 	mrs	r2, BASEPRI
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	61ba      	str	r2, [r7, #24]
 8004f52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <xQueueGenericSendFromISR+0xb6>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d12c      	bne.n	8004fc4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7a:	f000 f90b 	bl	8005194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f86:	d112      	bne.n	8004fae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d016      	beq.n	8004fbe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	3324      	adds	r3, #36	; 0x24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 ff2b 	bl	8005df0 <xTaskRemoveFromEventList>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00e      	beq.n	8004fbe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e007      	b.n	8004fbe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	b25a      	sxtb	r2, r3
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004fc2:	e001      	b.n	8004fc8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3738      	adds	r7, #56	; 0x38
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08c      	sub	sp, #48	; 0x30
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <xQueueReceive+0x2e>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	623b      	str	r3, [r7, #32]
 8005008:	e7fe      	b.n	8005008 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d103      	bne.n	8005018 <xQueueReceive+0x3c>
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <xQueueReceive+0x40>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <xQueueReceive+0x42>
 800501c:	2300      	movs	r3, #0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <xQueueReceive+0x5a>
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e7fe      	b.n	8005034 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005036:	f001 f8e7 	bl	8006208 <xTaskGetSchedulerState>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <xQueueReceive+0x6a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <xQueueReceive+0x6e>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueReceive+0x70>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <xQueueReceive+0x88>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	e7fe      	b.n	8005062 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005064:	f001 fec2 	bl	8006dec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01f      	beq.n	80050b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005078:	f000 f8f6 	bl	8005268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00f      	beq.n	80050ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	3310      	adds	r3, #16
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fead 	bl	8005df0 <xTaskRemoveFromEventList>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800509c:	4b3c      	ldr	r3, [pc, #240]	; (8005190 <xQueueReceive+0x1b4>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ac:	f001 fecc 	bl	8006e48 <vPortExitCritical>
				return pdPASS;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e069      	b.n	8005188 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050ba:	f001 fec5 	bl	8006e48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050be:	2300      	movs	r3, #0
 80050c0:	e062      	b.n	8005188 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fef3 	bl	8005eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d6:	f001 feb7 	bl	8006e48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050da:	f000 fbf3 	bl	80058c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050de:	f001 fe85 	bl	8006dec <vPortEnterCritical>
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ee:	d103      	bne.n	80050f8 <xQueueReceive+0x11c>
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fe:	b25b      	sxtb	r3, r3
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005104:	d103      	bne.n	800510e <xQueueReceive+0x132>
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800510e:	f001 fe9b 	bl	8006e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005112:	1d3a      	adds	r2, r7, #4
 8005114:	f107 0310 	add.w	r3, r7, #16
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fee2 	bl	8005ee4 <xTaskCheckForTimeOut>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d123      	bne.n	800516e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005128:	f000 f916 	bl	8005358 <prvIsQueueEmpty>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	3324      	adds	r3, #36	; 0x24
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fe0a 	bl	8005d54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005142:	f000 f8b7 	bl	80052b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005146:	f000 fc05 	bl	8005954 <xTaskResumeAll>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d189      	bne.n	8005064 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <xQueueReceive+0x1b4>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	e780      	b.n	8005064 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005164:	f000 f8a6 	bl	80052b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005168:	f000 fbf4 	bl	8005954 <xTaskResumeAll>
 800516c:	e77a      	b.n	8005064 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800516e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005170:	f000 f8a0 	bl	80052b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005174:	f000 fbee 	bl	8005954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517a:	f000 f8ed 	bl	8005358 <prvIsQueueEmpty>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	f43f af6f 	beq.w	8005064 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005186:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005188:	4618      	mov	r0, r3
 800518a:	3730      	adds	r7, #48	; 0x30
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10d      	bne.n	80051ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d14d      	bne.n	8005256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 f840 	bl	8006244 <xTaskPriorityDisinherit>
 80051c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	609a      	str	r2, [r3, #8]
 80051cc:	e043      	b.n	8005256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d119      	bne.n	8005208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6858      	ldr	r0, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	461a      	mov	r2, r3
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	f002 f9fc 	bl	80075dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d32b      	bcc.n	8005256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	e026      	b.n	8005256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68d8      	ldr	r0, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	461a      	mov	r2, r3
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	f002 f9e2 	bl	80075dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	425b      	negs	r3, r3
 8005222:	441a      	add	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d207      	bcs.n	8005244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	425b      	negs	r3, r3
 800523e:	441a      	add	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d105      	bne.n	8005256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	3b01      	subs	r3, #1
 8005254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800525e:	697b      	ldr	r3, [r7, #20]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d018      	beq.n	80052ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	441a      	add	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d303      	bcc.n	800529c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68d9      	ldr	r1, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	461a      	mov	r2, r3
 80052a6:	6838      	ldr	r0, [r7, #0]
 80052a8:	f002 f998 	bl	80075dc <memcpy>
	}
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052bc:	f001 fd96 	bl	8006dec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c8:	e011      	b.n	80052ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d012      	beq.n	80052f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3324      	adds	r3, #36	; 0x24
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fd8a 	bl	8005df0 <xTaskRemoveFromEventList>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052e2:	f000 fe5f 	bl	8005fa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dce9      	bgt.n	80052ca <prvUnlockQueue+0x16>
 80052f6:	e000      	b.n	80052fa <prvUnlockQueue+0x46>
					break;
 80052f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	22ff      	movs	r2, #255	; 0xff
 80052fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005302:	f001 fda1 	bl	8006e48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005306:	f001 fd71 	bl	8006dec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005312:	e011      	b.n	8005338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d012      	beq.n	8005342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3310      	adds	r3, #16
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fd65 	bl	8005df0 <xTaskRemoveFromEventList>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800532c:	f000 fe3a 	bl	8005fa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	3b01      	subs	r3, #1
 8005334:	b2db      	uxtb	r3, r3
 8005336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800533c:	2b00      	cmp	r3, #0
 800533e:	dce9      	bgt.n	8005314 <prvUnlockQueue+0x60>
 8005340:	e000      	b.n	8005344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	22ff      	movs	r2, #255	; 0xff
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800534c:	f001 fd7c 	bl	8006e48 <vPortExitCritical>
}
 8005350:	bf00      	nop
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005360:	f001 fd44 	bl	8006dec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e001      	b.n	8005376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005376:	f001 fd67 	bl	8006e48 <vPortExitCritical>

	return xReturn;
 800537a:	68fb      	ldr	r3, [r7, #12]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800538c:	f001 fd2e 	bl	8006dec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	429a      	cmp	r2, r3
 800539a:	d102      	bne.n	80053a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800539c:	2301      	movs	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e001      	b.n	80053a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053a6:	f001 fd4f 	bl	8006e48 <vPortExitCritical>

	return xReturn;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e014      	b.n	80053ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053c4:	4a0e      	ldr	r2, [pc, #56]	; (8005400 <vQueueAddToRegistry+0x4c>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053d0:	490b      	ldr	r1, [pc, #44]	; (8005400 <vQueueAddToRegistry+0x4c>)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <vQueueAddToRegistry+0x4c>)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053e6:	e005      	b.n	80053f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b07      	cmp	r3, #7
 80053f2:	d9e7      	bls.n	80053c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	20004b5c 	.word	0x20004b5c

08005404 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005414:	f001 fcea 	bl	8006dec <vPortEnterCritical>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800541e:	b25b      	sxtb	r3, r3
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005424:	d103      	bne.n	800542e <vQueueWaitForMessageRestricted+0x2a>
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005434:	b25b      	sxtb	r3, r3
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800543a:	d103      	bne.n	8005444 <vQueueWaitForMessageRestricted+0x40>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005444:	f001 fd00 	bl	8006e48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3324      	adds	r3, #36	; 0x24
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fc9f 	bl	8005d9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800545e:	6978      	ldr	r0, [r7, #20]
 8005460:	f7ff ff28 	bl	80052b4 <prvUnlockQueue>
	}
 8005464:	bf00      	nop
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08e      	sub	sp, #56	; 0x38
 8005470:	af04      	add	r7, sp, #16
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <xTaskCreateStatic+0x28>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	e7fe      	b.n	8005492 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <xTaskCreateStatic+0x42>
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e7fe      	b.n	80054ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054ae:	2358      	movs	r3, #88	; 0x58
 80054b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b58      	cmp	r3, #88	; 0x58
 80054b6:	d009      	beq.n	80054cc <xTaskCreateStatic+0x60>
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	e7fe      	b.n	80054ca <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01e      	beq.n	8005512 <xTaskCreateStatic+0xa6>
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d01b      	beq.n	8005512 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054ec:	2300      	movs	r3, #0
 80054ee:	9303      	str	r3, [sp, #12]
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	9302      	str	r3, [sp, #8]
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f850 	bl	80055aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800550a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800550c:	f000 f8d6 	bl	80056bc <prvAddNewTaskToReadyList>
 8005510:	e001      	b.n	8005516 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005516:	697b      	ldr	r3, [r7, #20]
	}
 8005518:	4618      	mov	r0, r3
 800551a:	3728      	adds	r7, #40	; 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af04      	add	r7, sp, #16
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4618      	mov	r0, r3
 8005536:	f001 fe57 	bl	80071e8 <pvPortMalloc>
 800553a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00e      	beq.n	8005560 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005542:	2058      	movs	r0, #88	; 0x58
 8005544:	f001 fe50 	bl	80071e8 <pvPortMalloc>
 8005548:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
 8005556:	e005      	b.n	8005564 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005558:	6978      	ldr	r0, [r7, #20]
 800555a:	f001 ff07 	bl	800736c <vPortFree>
 800555e:	e001      	b.n	8005564 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d017      	beq.n	800559a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	2300      	movs	r3, #0
 8005576:	9303      	str	r3, [sp, #12]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	9302      	str	r3, [sp, #8]
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f80e 	bl	80055aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800558e:	69f8      	ldr	r0, [r7, #28]
 8005590:	f000 f894 	bl	80056bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005594:	2301      	movs	r3, #1
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	e002      	b.n	80055a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800559e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055a0:	69bb      	ldr	r3, [r7, #24]
	}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b088      	sub	sp, #32
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055c2:	3b01      	subs	r3, #1
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f023 0307 	bic.w	r3, r3, #7
 80055d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <prvInitialiseNewTask+0x46>
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	e7fe      	b.n	80055ee <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01f      	beq.n	8005636 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055f6:	2300      	movs	r3, #0
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	e012      	b.n	8005622 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	7819      	ldrb	r1, [r3, #0]
 8005604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	3334      	adds	r3, #52	; 0x34
 800560c:	460a      	mov	r2, r1
 800560e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d006      	beq.n	800562a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	3301      	adds	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b0f      	cmp	r3, #15
 8005626:	d9e9      	bls.n	80055fc <prvInitialiseNewTask+0x52>
 8005628:	e000      	b.n	800562c <prvInitialiseNewTask+0x82>
			{
				break;
 800562a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005634:	e003      	b.n	800563e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	2b06      	cmp	r3, #6
 8005642:	d901      	bls.n	8005648 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005644:	2306      	movs	r3, #6
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005652:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	2200      	movs	r2, #0
 8005658:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	3304      	adds	r3, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff f9a0 	bl	80049a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	3318      	adds	r3, #24
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff f99b 	bl	80049a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005672:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	f1c3 0207 	rsb	r2, r3, #7
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005682:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	2200      	movs	r2, #0
 8005688:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	2200      	movs	r2, #0
 800568e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	69b8      	ldr	r0, [r7, #24]
 800569e:	f001 fa81 	bl	8006ba4 <pxPortInitialiseStack>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b4:	bf00      	nop
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056c4:	f001 fb92 	bl	8006dec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056c8:	4b2a      	ldr	r3, [pc, #168]	; (8005774 <prvAddNewTaskToReadyList+0xb8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a29      	ldr	r2, [pc, #164]	; (8005774 <prvAddNewTaskToReadyList+0xb8>)
 80056d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056d2:	4b29      	ldr	r3, [pc, #164]	; (8005778 <prvAddNewTaskToReadyList+0xbc>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056da:	4a27      	ldr	r2, [pc, #156]	; (8005778 <prvAddNewTaskToReadyList+0xbc>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056e0:	4b24      	ldr	r3, [pc, #144]	; (8005774 <prvAddNewTaskToReadyList+0xb8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d110      	bne.n	800570a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056e8:	f000 fcd4 	bl	8006094 <prvInitialiseTaskLists>
 80056ec:	e00d      	b.n	800570a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056ee:	4b23      	ldr	r3, [pc, #140]	; (800577c <prvAddNewTaskToReadyList+0xc0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <prvAddNewTaskToReadyList+0xbc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	429a      	cmp	r2, r3
 8005702:	d802      	bhi.n	800570a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005704:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <prvAddNewTaskToReadyList+0xbc>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800570a:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <prvAddNewTaskToReadyList+0xc4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <prvAddNewTaskToReadyList+0xc4>)
 8005712:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	2201      	movs	r2, #1
 800571a:	409a      	lsls	r2, r3
 800571c:	4b19      	ldr	r3, [pc, #100]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4313      	orrs	r3, r2
 8005722:	4a18      	ldr	r2, [pc, #96]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <prvAddNewTaskToReadyList+0xcc>)
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3304      	adds	r3, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f7ff f93e 	bl	80049be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005742:	f001 fb81 	bl	8006e48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005746:	4b0d      	ldr	r3, [pc, #52]	; (800577c <prvAddNewTaskToReadyList+0xc0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00e      	beq.n	800576c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <prvAddNewTaskToReadyList+0xbc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	429a      	cmp	r2, r3
 800575a:	d207      	bcs.n	800576c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <prvAddNewTaskToReadyList+0xd0>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	200007dc 	.word	0x200007dc
 8005778:	200006dc 	.word	0x200006dc
 800577c:	200007e8 	.word	0x200007e8
 8005780:	200007f8 	.word	0x200007f8
 8005784:	200007e4 	.word	0x200007e4
 8005788:	200006e0 	.word	0x200006e0
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d016      	beq.n	80057d0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <vTaskDelay+0x60>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <vTaskDelay+0x2e>
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	e7fe      	b.n	80057bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80057be:	f000 f881 	bl	80058c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057c2:	2100      	movs	r1, #0
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fdc1 	bl	800634c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057ca:	f000 f8c3 	bl	8005954 <xTaskResumeAll>
 80057ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d107      	bne.n	80057e6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <vTaskDelay+0x64>)
 80057d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000804 	.word	0x20000804
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005806:	463a      	mov	r2, r7
 8005808:	1d39      	adds	r1, r7, #4
 800580a:	f107 0308 	add.w	r3, r7, #8
 800580e:	4618      	mov	r0, r3
 8005810:	f7fa fe8a 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	9202      	str	r2, [sp, #8]
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	2300      	movs	r3, #0
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	2300      	movs	r3, #0
 8005824:	460a      	mov	r2, r1
 8005826:	4921      	ldr	r1, [pc, #132]	; (80058ac <vTaskStartScheduler+0xb4>)
 8005828:	4821      	ldr	r0, [pc, #132]	; (80058b0 <vTaskStartScheduler+0xb8>)
 800582a:	f7ff fe1f 	bl	800546c <xTaskCreateStatic>
 800582e:	4602      	mov	r2, r0
 8005830:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <vTaskStartScheduler+0xbc>)
 8005832:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <vTaskStartScheduler+0xbc>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800583c:	2301      	movs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e001      	b.n	8005846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d102      	bne.n	8005852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800584c:	f000 fde4 	bl	8006418 <xTimerCreateTimerTask>
 8005850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d117      	bne.n	8005888 <vTaskStartScheduler+0x90>
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800586a:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <vTaskStartScheduler+0xc0>)
 800586c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005870:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <vTaskStartScheduler+0xc4>)
 8005874:	2201      	movs	r2, #1
 8005876:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <vTaskStartScheduler+0xc8>)
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800587e:	f7fa fe2f 	bl	80004e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005882:	f001 fa15 	bl	8006cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005886:	e00d      	b.n	80058a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588e:	d109      	bne.n	80058a4 <vTaskStartScheduler+0xac>
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e7fe      	b.n	80058a2 <vTaskStartScheduler+0xaa>
}
 80058a4:	bf00      	nop
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	0800766c 	.word	0x0800766c
 80058b0:	08005fbd 	.word	0x08005fbd
 80058b4:	20000800 	.word	0x20000800
 80058b8:	200007fc 	.word	0x200007fc
 80058bc:	200007e8 	.word	0x200007e8
 80058c0:	200007e0 	.word	0x200007e0

080058c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <vTaskSuspendAll+0x18>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3301      	adds	r3, #1
 80058ce:	4a03      	ldr	r2, [pc, #12]	; (80058dc <vTaskSuspendAll+0x18>)
 80058d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80058d2:	bf00      	nop
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20000804 	.word	0x20000804

080058e0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 80058ea:	2301      	movs	r3, #1
 80058ec:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <prvGetExpectedIdleTime+0x60>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d201      	bcs.n	80058fc <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80058fc:	4b11      	ldr	r3, [pc, #68]	; (8005944 <prvGetExpectedIdleTime+0x64>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e012      	b.n	8005932 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <prvGetExpectedIdleTime+0x68>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d902      	bls.n	800591a <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e00b      	b.n	8005932 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e005      	b.n	8005932 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <prvGetExpectedIdleTime+0x6c>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <prvGetExpectedIdleTime+0x70>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8005932:	68fb      	ldr	r3, [r7, #12]
	}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	200007e4 	.word	0x200007e4
 8005944:	200006dc 	.word	0x200006dc
 8005948:	200006e0 	.word	0x200006e0
 800594c:	200007fc 	.word	0x200007fc
 8005950:	200007e0 	.word	0x200007e0

08005954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005962:	4b41      	ldr	r3, [pc, #260]	; (8005a68 <xTaskResumeAll+0x114>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <xTaskResumeAll+0x2a>
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	e7fe      	b.n	800597c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800597e:	f001 fa35 	bl	8006dec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005982:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <xTaskResumeAll+0x114>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3b01      	subs	r3, #1
 8005988:	4a37      	ldr	r2, [pc, #220]	; (8005a68 <xTaskResumeAll+0x114>)
 800598a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <xTaskResumeAll+0x114>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d161      	bne.n	8005a58 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <xTaskResumeAll+0x118>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05d      	beq.n	8005a58 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599c:	e02e      	b.n	80059fc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599e:	4b34      	ldr	r3, [pc, #208]	; (8005a70 <xTaskResumeAll+0x11c>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3318      	adds	r3, #24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff f864 	bl	8004a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff f85f 	bl	8004a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	2201      	movs	r2, #1
 80059c0:	409a      	lsls	r2, r3
 80059c2:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <xTaskResumeAll+0x120>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <xTaskResumeAll+0x120>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a27      	ldr	r2, [pc, #156]	; (8005a78 <xTaskResumeAll+0x124>)
 80059da:	441a      	add	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe ffeb 	bl	80049be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <xTaskResumeAll+0x128>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80059f6:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <xTaskResumeAll+0x12c>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059fc:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <xTaskResumeAll+0x11c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1cc      	bne.n	800599e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a0a:	f000 fbdd 	bl	80061c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <xTaskResumeAll+0x130>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d010      	beq.n	8005a3c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a1a:	f000 f86d 	bl	8005af8 <xTaskIncrementTick>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005a24:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <xTaskResumeAll+0x12c>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f1      	bne.n	8005a1a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005a36:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <xTaskResumeAll+0x130>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <xTaskResumeAll+0x12c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <xTaskResumeAll+0x134>)
 8005a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a58:	f001 f9f6 	bl	8006e48 <vPortExitCritical>

	return xAlreadyYielded;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000804 	.word	0x20000804
 8005a6c:	200007dc 	.word	0x200007dc
 8005a70:	2000079c 	.word	0x2000079c
 8005a74:	200007e4 	.word	0x200007e4
 8005a78:	200006e0 	.word	0x200006e0
 8005a7c:	200006dc 	.word	0x200006dc
 8005a80:	200007f0 	.word	0x200007f0
 8005a84:	200007ec 	.word	0x200007ec
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <xTaskGetTickCount+0x1c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a98:	687b      	ldr	r3, [r7, #4]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	200007e0 	.word	0x200007e0

08005aac <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <vTaskStepTick+0x44>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	441a      	add	r2, r3
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <vTaskStepTick+0x48>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d909      	bls.n	8005ad8 <vTaskStepTick+0x2c>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e7fe      	b.n	8005ad6 <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <vTaskStepTick+0x44>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4413      	add	r3, r2
 8005ae0:	4a03      	ldr	r2, [pc, #12]	; (8005af0 <vTaskStepTick+0x44>)
 8005ae2:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	200007e0 	.word	0x200007e0
 8005af4:	200007fc 	.word	0x200007fc

08005af8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b02:	4b4e      	ldr	r3, [pc, #312]	; (8005c3c <xTaskIncrementTick+0x144>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 8087 	bne.w	8005c1a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b0c:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <xTaskIncrementTick+0x148>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b14:	4a4a      	ldr	r2, [pc, #296]	; (8005c40 <xTaskIncrementTick+0x148>)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d11f      	bne.n	8005b60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b20:	4b48      	ldr	r3, [pc, #288]	; (8005c44 <xTaskIncrementTick+0x14c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <xTaskIncrementTick+0x46>
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	e7fe      	b.n	8005b3c <xTaskIncrementTick+0x44>
 8005b3e:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <xTaskIncrementTick+0x14c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	4b40      	ldr	r3, [pc, #256]	; (8005c48 <xTaskIncrementTick+0x150>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a3e      	ldr	r2, [pc, #248]	; (8005c44 <xTaskIncrementTick+0x14c>)
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4a3e      	ldr	r2, [pc, #248]	; (8005c48 <xTaskIncrementTick+0x150>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	4b3e      	ldr	r3, [pc, #248]	; (8005c4c <xTaskIncrementTick+0x154>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3301      	adds	r3, #1
 8005b58:	4a3c      	ldr	r2, [pc, #240]	; (8005c4c <xTaskIncrementTick+0x154>)
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	f000 fb34 	bl	80061c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b60:	4b3b      	ldr	r3, [pc, #236]	; (8005c50 <xTaskIncrementTick+0x158>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d348      	bcc.n	8005bfc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b6a:	4b36      	ldr	r3, [pc, #216]	; (8005c44 <xTaskIncrementTick+0x14c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d104      	bne.n	8005b7e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b74:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <xTaskIncrementTick+0x158>)
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b7a:	601a      	str	r2, [r3, #0]
					break;
 8005b7c:	e03e      	b.n	8005bfc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7e:	4b31      	ldr	r3, [pc, #196]	; (8005c44 <xTaskIncrementTick+0x14c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d203      	bcs.n	8005b9e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b96:	4a2e      	ldr	r2, [pc, #184]	; (8005c50 <xTaskIncrementTick+0x158>)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b9c:	e02e      	b.n	8005bfc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe ff68 	bl	8004a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	3318      	adds	r3, #24
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fe ff5f 	bl	8004a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <xTaskIncrementTick+0x15c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	4a22      	ldr	r2, [pc, #136]	; (8005c54 <xTaskIncrementTick+0x15c>)
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <xTaskIncrementTick+0x160>)
 8005bda:	441a      	add	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f7fe feeb 	bl	80049be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	4b1b      	ldr	r3, [pc, #108]	; (8005c5c <xTaskIncrementTick+0x164>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d3b9      	bcc.n	8005b6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bfa:	e7b6      	b.n	8005b6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bfc:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <xTaskIncrementTick+0x164>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	4915      	ldr	r1, [pc, #84]	; (8005c58 <xTaskIncrementTick+0x160>)
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d907      	bls.n	8005c24 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e004      	b.n	8005c24 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <xTaskIncrementTick+0x168>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <xTaskIncrementTick+0x168>)
 8005c22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <xTaskIncrementTick+0x16c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c30:	697b      	ldr	r3, [r7, #20]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000804 	.word	0x20000804
 8005c40:	200007e0 	.word	0x200007e0
 8005c44:	20000794 	.word	0x20000794
 8005c48:	20000798 	.word	0x20000798
 8005c4c:	200007f4 	.word	0x200007f4
 8005c50:	200007fc 	.word	0x200007fc
 8005c54:	200007e4 	.word	0x200007e4
 8005c58:	200006e0 	.word	0x200006e0
 8005c5c:	200006dc 	.word	0x200006dc
 8005c60:	200007ec 	.word	0x200007ec
 8005c64:	200007f0 	.word	0x200007f0

08005c68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c6e:	4b32      	ldr	r3, [pc, #200]	; (8005d38 <vTaskSwitchContext+0xd0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c76:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <vTaskSwitchContext+0xd4>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c7c:	e057      	b.n	8005d2e <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8005c7e:	4b2f      	ldr	r3, [pc, #188]	; (8005d3c <vTaskSwitchContext+0xd4>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005c84:	f7fa fc33 	bl	80004ee <getRunTimeCounterValue>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b2d      	ldr	r3, [pc, #180]	; (8005d40 <vTaskSwitchContext+0xd8>)
 8005c8c:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005c8e:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <vTaskSwitchContext+0xd8>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b2c      	ldr	r3, [pc, #176]	; (8005d44 <vTaskSwitchContext+0xdc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d909      	bls.n	8005cae <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <vTaskSwitchContext+0xe0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005ca0:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <vTaskSwitchContext+0xd8>)
 8005ca2:	6810      	ldr	r0, [r2, #0]
 8005ca4:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <vTaskSwitchContext+0xdc>)
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	1a82      	subs	r2, r0, r2
 8005caa:	440a      	add	r2, r1
 8005cac:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <vTaskSwitchContext+0xd8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <vTaskSwitchContext+0xdc>)
 8005cb4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb6:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <vTaskSwitchContext+0xe4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	fab3 f383 	clz	r3, r3
 8005cc2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005cc4:	7afb      	ldrb	r3, [r7, #11]
 8005cc6:	f1c3 031f 	rsb	r3, r3, #31
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	4920      	ldr	r1, [pc, #128]	; (8005d50 <vTaskSwitchContext+0xe8>)
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <vTaskSwitchContext+0x8c>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	e7fe      	b.n	8005cf2 <vTaskSwitchContext+0x8a>
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <vTaskSwitchContext+0xe8>)
 8005d00:	4413      	add	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	3308      	adds	r3, #8
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d104      	bne.n	8005d24 <vTaskSwitchContext+0xbc>
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	605a      	str	r2, [r3, #4]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <vTaskSwitchContext+0xe0>)
 8005d2c:	6013      	str	r3, [r2, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000804 	.word	0x20000804
 8005d3c:	200007f0 	.word	0x200007f0
 8005d40:	2000080c 	.word	0x2000080c
 8005d44:	20000808 	.word	0x20000808
 8005d48:	200006dc 	.word	0x200006dc
 8005d4c:	200007e4 	.word	0x200007e4
 8005d50:	200006e0 	.word	0x200006e0

08005d54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <vTaskPlaceOnEventList+0x24>
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e7fe      	b.n	8005d76 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d78:	4b07      	ldr	r3, [pc, #28]	; (8005d98 <vTaskPlaceOnEventList+0x44>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3318      	adds	r3, #24
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fe fe40 	bl	8004a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d86:	2101      	movs	r1, #1
 8005d88:	6838      	ldr	r0, [r7, #0]
 8005d8a:	f000 fadf 	bl	800634c <prvAddCurrentTaskToDelayedList>
}
 8005d8e:	bf00      	nop
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200006dc 	.word	0x200006dc

08005d9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <vTaskPlaceOnEventListRestricted+0x26>
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e7fe      	b.n	8005dc0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <vTaskPlaceOnEventListRestricted+0x50>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	4619      	mov	r1, r3
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7fe fdf7 	bl	80049be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	68b8      	ldr	r0, [r7, #8]
 8005de0:	f000 fab4 	bl	800634c <prvAddCurrentTaskToDelayedList>
	}
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200006dc 	.word	0x200006dc

08005df0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <xTaskRemoveFromEventList+0x2a>
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e7fe      	b.n	8005e18 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3318      	adds	r3, #24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fe2a 	bl	8004a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e24:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <xTaskRemoveFromEventList+0xb0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11e      	bne.n	8005e6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fe21 	bl	8004a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	409a      	lsls	r2, r3
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <xTaskRemoveFromEventList+0xb4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <xTaskRemoveFromEventList+0xb4>)
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <xTaskRemoveFromEventList+0xb8>)
 8005e56:	441a      	add	r2, r3
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f7fe fdad 	bl	80049be <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8005e64:	f000 f9b0 	bl	80061c8 <prvResetNextTaskUnblockTime>
 8005e68:	e005      	b.n	8005e76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3318      	adds	r3, #24
 8005e6e:	4619      	mov	r1, r3
 8005e70:	480e      	ldr	r0, [pc, #56]	; (8005eac <xTaskRemoveFromEventList+0xbc>)
 8005e72:	f7fe fda4 	bl	80049be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7a:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <xTaskRemoveFromEventList+0xc0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d905      	bls.n	8005e90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <xTaskRemoveFromEventList+0xc4>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e001      	b.n	8005e94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e94:	697b      	ldr	r3, [r7, #20]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000804 	.word	0x20000804
 8005ea4:	200007e4 	.word	0x200007e4
 8005ea8:	200006e0 	.word	0x200006e0
 8005eac:	2000079c 	.word	0x2000079c
 8005eb0:	200006dc 	.word	0x200006dc
 8005eb4:	200007f0 	.word	0x200007f0

08005eb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <vTaskInternalSetTimeOutState+0x24>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <vTaskInternalSetTimeOutState+0x28>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	605a      	str	r2, [r3, #4]
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	200007f4 	.word	0x200007f4
 8005ee0:	200007e0 	.word	0x200007e0

08005ee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <xTaskCheckForTimeOut+0x24>
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	e7fe      	b.n	8005f06 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <xTaskCheckForTimeOut+0x3e>
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e7fe      	b.n	8005f20 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005f22:	f000 ff63 	bl	8006dec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f26:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <xTaskCheckForTimeOut+0xb8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3e:	d102      	bne.n	8005f46 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	e023      	b.n	8005f8e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <xTaskCheckForTimeOut+0xbc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d007      	beq.n	8005f62 <xTaskCheckForTimeOut+0x7e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	e015      	b.n	8005f8e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d20b      	bcs.n	8005f84 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ff9d 	bl	8005eb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	e004      	b.n	8005f8e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f8e:	f000 ff5b 	bl	8006e48 <vPortExitCritical>

	return xReturn;
 8005f92:	69fb      	ldr	r3, [r7, #28]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	200007e0 	.word	0x200007e0
 8005fa0:	200007f4 	.word	0x200007f4

08005fa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <vTaskMissedYield+0x14>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	200007f0 	.word	0x200007f0

08005fbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fc4:	f000 f8a6 	bl	8006114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fc8:	4b17      	ldr	r3, [pc, #92]	; (8006028 <prvIdleTask+0x6c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d907      	bls.n	8005fe0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005fd0:	4b16      	ldr	r3, [pc, #88]	; (800602c <prvIdleTask+0x70>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8005fe0:	f7ff fc7e 	bl	80058e0 <prvGetExpectedIdleTime>
 8005fe4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d9eb      	bls.n	8005fc4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8005fec:	f7ff fc6a 	bl	80058c4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <prvIdleTask+0x74>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <prvIdleTask+0x78>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d209      	bcs.n	8006010 <prvIdleTask+0x54>
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	e7fe      	b.n	800600e <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8006010:	f7ff fc66 	bl	80058e0 <prvGetExpectedIdleTime>
 8006014:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d902      	bls.n	8006022 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 ff93 	bl	8006f48 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8006022:	f7ff fc97 	bl	8005954 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8006026:	e7cd      	b.n	8005fc4 <prvIdleTask+0x8>
 8006028:	200006e0 	.word	0x200006e0
 800602c:	e000ed04 	.word	0xe000ed04
 8006030:	200007fc 	.word	0x200007fc
 8006034:	200007e0 	.word	0x200007e0

08006038 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800603e:	2301      	movs	r3, #1
 8006040:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8006042:	2301      	movs	r3, #1
 8006044:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <eTaskConfirmSleepModeStatus+0x4c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800604e:	2300      	movs	r3, #0
 8006050:	71fb      	strb	r3, [r7, #7]
 8006052:	e010      	b.n	8006076 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <eTaskConfirmSleepModeStatus+0x50>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800605c:	2300      	movs	r3, #0
 800605e:	71fb      	strb	r3, [r7, #7]
 8006060:	e009      	b.n	8006076 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <eTaskConfirmSleepModeStatus+0x54>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <eTaskConfirmSleepModeStatus+0x58>)
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	1acb      	subs	r3, r1, r3
 800606e:	429a      	cmp	r2, r3
 8006070:	d101      	bne.n	8006076 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8006072:	2302      	movs	r3, #2
 8006074:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8006076:	79fb      	ldrb	r3, [r7, #7]
	}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	2000079c 	.word	0x2000079c
 8006088:	200007f0 	.word	0x200007f0
 800608c:	200007c8 	.word	0x200007c8
 8006090:	200007dc 	.word	0x200007dc

08006094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800609a:	2300      	movs	r3, #0
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	e00c      	b.n	80060ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <prvInitialiseTaskLists+0x60>)
 80060ac:	4413      	add	r3, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fc58 	bl	8004964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3301      	adds	r3, #1
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b06      	cmp	r3, #6
 80060be:	d9ef      	bls.n	80060a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060c0:	480d      	ldr	r0, [pc, #52]	; (80060f8 <prvInitialiseTaskLists+0x64>)
 80060c2:	f7fe fc4f 	bl	8004964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060c6:	480d      	ldr	r0, [pc, #52]	; (80060fc <prvInitialiseTaskLists+0x68>)
 80060c8:	f7fe fc4c 	bl	8004964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060cc:	480c      	ldr	r0, [pc, #48]	; (8006100 <prvInitialiseTaskLists+0x6c>)
 80060ce:	f7fe fc49 	bl	8004964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060d2:	480c      	ldr	r0, [pc, #48]	; (8006104 <prvInitialiseTaskLists+0x70>)
 80060d4:	f7fe fc46 	bl	8004964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060d8:	480b      	ldr	r0, [pc, #44]	; (8006108 <prvInitialiseTaskLists+0x74>)
 80060da:	f7fe fc43 	bl	8004964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <prvInitialiseTaskLists+0x78>)
 80060e0:	4a05      	ldr	r2, [pc, #20]	; (80060f8 <prvInitialiseTaskLists+0x64>)
 80060e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <prvInitialiseTaskLists+0x7c>)
 80060e6:	4a05      	ldr	r2, [pc, #20]	; (80060fc <prvInitialiseTaskLists+0x68>)
 80060e8:	601a      	str	r2, [r3, #0]
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	200006e0 	.word	0x200006e0
 80060f8:	2000076c 	.word	0x2000076c
 80060fc:	20000780 	.word	0x20000780
 8006100:	2000079c 	.word	0x2000079c
 8006104:	200007b0 	.word	0x200007b0
 8006108:	200007c8 	.word	0x200007c8
 800610c:	20000794 	.word	0x20000794
 8006110:	20000798 	.word	0x20000798

08006114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800611a:	e019      	b.n	8006150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800611c:	f000 fe66 	bl	8006dec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006120:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <prvCheckTasksWaitingTermination+0x4c>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe fca3 	bl	8004a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006132:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <prvCheckTasksWaitingTermination+0x50>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3b01      	subs	r3, #1
 8006138:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <prvCheckTasksWaitingTermination+0x50>)
 800613a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <prvCheckTasksWaitingTermination+0x54>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3b01      	subs	r3, #1
 8006142:	4a09      	ldr	r2, [pc, #36]	; (8006168 <prvCheckTasksWaitingTermination+0x54>)
 8006144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006146:	f000 fe7f 	bl	8006e48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f80e 	bl	800616c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <prvCheckTasksWaitingTermination+0x54>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e1      	bne.n	800611c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	200007b0 	.word	0x200007b0
 8006164:	200007dc 	.word	0x200007dc
 8006168:	200007c4 	.word	0x200007c4

0800616c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800617a:	2b00      	cmp	r3, #0
 800617c:	d108      	bne.n	8006190 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	4618      	mov	r0, r3
 8006184:	f001 f8f2 	bl	800736c <vPortFree>
				vPortFree( pxTCB );
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f8ef 	bl	800736c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800618e:	e017      	b.n	80061c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006196:	2b01      	cmp	r3, #1
 8006198:	d103      	bne.n	80061a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 f8e6 	bl	800736c <vPortFree>
	}
 80061a0:	e00e      	b.n	80061c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d009      	beq.n	80061c0 <prvDeleteTCB+0x54>
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e7fe      	b.n	80061be <prvDeleteTCB+0x52>
	}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <prvResetNextTaskUnblockTime+0x38>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <prvResetNextTaskUnblockTime+0x3c>)
 80061da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061e0:	e008      	b.n	80061f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <prvResetNextTaskUnblockTime+0x38>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4a04      	ldr	r2, [pc, #16]	; (8006204 <prvResetNextTaskUnblockTime+0x3c>)
 80061f2:	6013      	str	r3, [r2, #0]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000794 	.word	0x20000794
 8006204:	200007fc 	.word	0x200007fc

08006208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800620e:	4b0b      	ldr	r3, [pc, #44]	; (800623c <xTaskGetSchedulerState+0x34>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006216:	2301      	movs	r3, #1
 8006218:	607b      	str	r3, [r7, #4]
 800621a:	e008      	b.n	800622e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800621c:	4b08      	ldr	r3, [pc, #32]	; (8006240 <xTaskGetSchedulerState+0x38>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006224:	2302      	movs	r3, #2
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	e001      	b.n	800622e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800622a:	2300      	movs	r3, #0
 800622c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800622e:	687b      	ldr	r3, [r7, #4]
	}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	200007e8 	.word	0x200007e8
 8006240:	20000804 	.word	0x20000804

08006244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d06c      	beq.n	8006334 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800625a:	4b39      	ldr	r3, [pc, #228]	; (8006340 <xTaskPriorityDisinherit+0xfc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	429a      	cmp	r2, r3
 8006262:	d009      	beq.n	8006278 <xTaskPriorityDisinherit+0x34>
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	e7fe      	b.n	8006276 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <xTaskPriorityDisinherit+0x50>
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60bb      	str	r3, [r7, #8]
 8006292:	e7fe      	b.n	8006292 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006298:	1e5a      	subs	r2, r3, #1
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d044      	beq.n	8006334 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d140      	bne.n	8006334 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fbde 	bl	8004a78 <uxListRemove>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d115      	bne.n	80062ee <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c6:	491f      	ldr	r1, [pc, #124]	; (8006344 <xTaskPriorityDisinherit+0x100>)
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xTaskPriorityDisinherit+0xaa>
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	2201      	movs	r2, #1
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43da      	mvns	r2, r3
 80062e4:	4b18      	ldr	r3, [pc, #96]	; (8006348 <xTaskPriorityDisinherit+0x104>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4013      	ands	r3, r2
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <xTaskPriorityDisinherit+0x104>)
 80062ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	f1c3 0207 	rsb	r2, r3, #7
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006306:	2201      	movs	r2, #1
 8006308:	409a      	lsls	r2, r3
 800630a:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <xTaskPriorityDisinherit+0x104>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4313      	orrs	r3, r2
 8006310:	4a0d      	ldr	r2, [pc, #52]	; (8006348 <xTaskPriorityDisinherit+0x104>)
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4a08      	ldr	r2, [pc, #32]	; (8006344 <xTaskPriorityDisinherit+0x100>)
 8006322:	441a      	add	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	3304      	adds	r3, #4
 8006328:	4619      	mov	r1, r3
 800632a:	4610      	mov	r0, r2
 800632c:	f7fe fb47 	bl	80049be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006330:	2301      	movs	r3, #1
 8006332:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006334:	697b      	ldr	r3, [r7, #20]
	}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	200006dc 	.word	0x200006dc
 8006344:	200006e0 	.word	0x200006e0
 8006348:	200007e4 	.word	0x200007e4

0800634c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006356:	4b29      	ldr	r3, [pc, #164]	; (80063fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800635c:	4b28      	ldr	r3, [pc, #160]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3304      	adds	r3, #4
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fb88 	bl	8004a78 <uxListRemove>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800636e:	4b24      	ldr	r3, [pc, #144]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	2201      	movs	r2, #1
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43da      	mvns	r2, r3
 800637c:	4b21      	ldr	r3, [pc, #132]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4013      	ands	r3, r2
 8006382:	4a20      	ldr	r2, [pc, #128]	; (8006404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800638c:	d10a      	bne.n	80063a4 <prvAddCurrentTaskToDelayedList+0x58>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006394:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	481a      	ldr	r0, [pc, #104]	; (8006408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800639e:	f7fe fb0e 	bl	80049be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063a2:	e026      	b.n	80063f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4413      	add	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ac:	4b14      	ldr	r3, [pc, #80]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d209      	bcs.n	80063d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063bc:	4b13      	ldr	r3, [pc, #76]	; (800640c <prvAddCurrentTaskToDelayedList+0xc0>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f7fe fb1c 	bl	8004a06 <vListInsert>
}
 80063ce:	e010      	b.n	80063f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063d0:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fe fb12 	bl	8004a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063e2:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d202      	bcs.n	80063f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063ec:	4a09      	ldr	r2, [pc, #36]	; (8006414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6013      	str	r3, [r2, #0]
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200007e0 	.word	0x200007e0
 8006400:	200006dc 	.word	0x200006dc
 8006404:	200007e4 	.word	0x200007e4
 8006408:	200007c8 	.word	0x200007c8
 800640c:	20000798 	.word	0x20000798
 8006410:	20000794 	.word	0x20000794
 8006414:	200007fc 	.word	0x200007fc

08006418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006422:	f000 fb7f 	bl	8006b24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006426:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <xTimerCreateTimerTask+0x80>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d021      	beq.n	8006472 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006436:	1d3a      	adds	r2, r7, #4
 8006438:	f107 0108 	add.w	r1, r7, #8
 800643c:	f107 030c 	add.w	r3, r7, #12
 8006440:	4618      	mov	r0, r3
 8006442:	f7fa f88b 	bl	800055c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	9202      	str	r2, [sp, #8]
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	2302      	movs	r3, #2
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	460a      	mov	r2, r1
 8006458:	4910      	ldr	r1, [pc, #64]	; (800649c <xTimerCreateTimerTask+0x84>)
 800645a:	4811      	ldr	r0, [pc, #68]	; (80064a0 <xTimerCreateTimerTask+0x88>)
 800645c:	f7ff f806 	bl	800546c <xTaskCreateStatic>
 8006460:	4602      	mov	r2, r0
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <xTimerCreateTimerTask+0x8c>)
 8006464:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006466:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <xTimerCreateTimerTask+0x8c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800646e:	2301      	movs	r3, #1
 8006470:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <xTimerCreateTimerTask+0x74>
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	e7fe      	b.n	800648a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800648c:	697b      	ldr	r3, [r7, #20]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000840 	.word	0x20000840
 800649c:	08007674 	.word	0x08007674
 80064a0:	08006709 	.word	0x08006709
 80064a4:	20000844 	.word	0x20000844

080064a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80064b6:	2028      	movs	r0, #40	; 0x28
 80064b8:	f000 fe96 	bl	80071e8 <pvPortMalloc>
 80064bc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00d      	beq.n	80064e0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f841 	bl	8006562 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80064e0:	697b      	ldr	r3, [r7, #20]
	}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b08a      	sub	sp, #40	; 0x28
 80064ee:	af02      	add	r7, sp, #8
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80064f8:	2328      	movs	r3, #40	; 0x28
 80064fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b28      	cmp	r3, #40	; 0x28
 8006500:	d009      	beq.n	8006516 <xTimerCreateStatic+0x2c>
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	e7fe      	b.n	8006514 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <xTimerCreateStatic+0x48>
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e7fe      	b.n	8006530 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00d      	beq.n	8006558 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f805 	bl	8006562 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006558:	69fb      	ldr	r3, [r7, #28]
	}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <prvInitialiseNewTimer+0x28>
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e7fe      	b.n	8006588 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01e      	beq.n	80065ce <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006590:	f000 fac8 	bl	8006b24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	6a3a      	ldr	r2, [r7, #32]
 80065aa:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe f9f7 	bl	80049a4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065c2:	f043 0304 	orr.w	r3, r3, #4
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80065ce:	bf00      	nop
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08a      	sub	sp, #40	; 0x28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <xTimerGenericCommand+0x2c>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	e7fe      	b.n	8006602 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006604:	4b19      	ldr	r3, [pc, #100]	; (800666c <xTimerGenericCommand+0x94>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d02a      	beq.n	8006662 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b05      	cmp	r3, #5
 800661c:	dc18      	bgt.n	8006650 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800661e:	f7ff fdf3 	bl	8006208 <xTaskGetSchedulerState>
 8006622:	4603      	mov	r3, r0
 8006624:	2b02      	cmp	r3, #2
 8006626:	d109      	bne.n	800663c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006628:	4b10      	ldr	r3, [pc, #64]	; (800666c <xTimerGenericCommand+0x94>)
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	f107 0114 	add.w	r1, r7, #20
 8006630:	2300      	movs	r3, #0
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	f7fe fb44 	bl	8004cc0 <xQueueGenericSend>
 8006638:	6278      	str	r0, [r7, #36]	; 0x24
 800663a:	e012      	b.n	8006662 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <xTimerGenericCommand+0x94>)
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	f107 0114 	add.w	r1, r7, #20
 8006644:	2300      	movs	r3, #0
 8006646:	2200      	movs	r2, #0
 8006648:	f7fe fb3a 	bl	8004cc0 <xQueueGenericSend>
 800664c:	6278      	str	r0, [r7, #36]	; 0x24
 800664e:	e008      	b.n	8006662 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <xTimerGenericCommand+0x94>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	f107 0114 	add.w	r1, r7, #20
 8006658:	2300      	movs	r3, #0
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	f7fe fc2a 	bl	8004eb4 <xQueueGenericSendFromISR>
 8006660:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006664:	4618      	mov	r0, r3
 8006666:	3728      	adds	r7, #40	; 0x28
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20000840 	.word	0x20000840

08006670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af02      	add	r7, sp, #8
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800667a:	4b22      	ldr	r3, [pc, #136]	; (8006704 <prvProcessExpiredTimer+0x94>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe f9f5 	bl	8004a78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d021      	beq.n	80066e0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	18d1      	adds	r1, r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	6978      	ldr	r0, [r7, #20]
 80066aa:	f000 f8d1 	bl	8006850 <prvInsertTimerInActiveList>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01e      	beq.n	80066f2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066b4:	2300      	movs	r3, #0
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	2300      	movs	r3, #0
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	2100      	movs	r1, #0
 80066be:	6978      	ldr	r0, [r7, #20]
 80066c0:	f7ff ff8a 	bl	80065d8 <xTimerGenericCommand>
 80066c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d112      	bne.n	80066f2 <prvProcessExpiredTimer+0x82>
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e7fe      	b.n	80066de <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	6978      	ldr	r0, [r7, #20]
 80066f8:	4798      	blx	r3
}
 80066fa:	bf00      	nop
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000838 	.word	0x20000838

08006708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006710:	f107 0308 	add.w	r3, r7, #8
 8006714:	4618      	mov	r0, r3
 8006716:	f000 f857 	bl	80067c8 <prvGetNextExpireTime>
 800671a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4619      	mov	r1, r3
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f803 	bl	800672c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006726:	f000 f8d5 	bl	80068d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800672a:	e7f1      	b.n	8006710 <prvTimerTask+0x8>

0800672c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006736:	f7ff f8c5 	bl	80058c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800673a:	f107 0308 	add.w	r3, r7, #8
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f866 	bl	8006810 <prvSampleTimeNow>
 8006744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d130      	bne.n	80067ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <prvProcessTimerOrBlockTask+0x3c>
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	429a      	cmp	r2, r3
 8006758:	d806      	bhi.n	8006768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800675a:	f7ff f8fb 	bl	8005954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff85 	bl	8006670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006766:	e024      	b.n	80067b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <prvProcessTimerOrBlockTask+0x90>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <prvProcessTimerOrBlockTask+0x50>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <prvProcessTimerOrBlockTask+0x52>
 800677c:	2300      	movs	r3, #0
 800677e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <prvProcessTimerOrBlockTask+0x94>)
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	4619      	mov	r1, r3
 800678e:	f7fe fe39 	bl	8005404 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006792:	f7ff f8df 	bl	8005954 <xTaskResumeAll>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <prvProcessTimerOrBlockTask+0x98>)
 800679e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	f3bf 8f6f 	isb	sy
}
 80067ac:	e001      	b.n	80067b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067ae:	f7ff f8d1 	bl	8005954 <xTaskResumeAll>
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2000083c 	.word	0x2000083c
 80067c0:	20000840 	.word	0x20000840
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067d0:	4b0e      	ldr	r3, [pc, #56]	; (800680c <prvGetNextExpireTime+0x44>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <prvGetNextExpireTime+0x16>
 80067da:	2201      	movs	r2, #1
 80067dc:	e000      	b.n	80067e0 <prvGetNextExpireTime+0x18>
 80067de:	2200      	movs	r2, #0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d105      	bne.n	80067f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <prvGetNextExpireTime+0x44>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	e001      	b.n	80067fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067fc:	68fb      	ldr	r3, [r7, #12]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000838 	.word	0x20000838

08006810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006818:	f7ff f938 	bl	8005a8c <xTaskGetTickCount>
 800681c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <prvSampleTimeNow+0x3c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	429a      	cmp	r2, r3
 8006826:	d205      	bcs.n	8006834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006828:	f000 f918 	bl	8006a5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	e002      	b.n	800683a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800683a:	4a04      	ldr	r2, [pc, #16]	; (800684c <prvSampleTimeNow+0x3c>)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000848 	.word	0x20000848

08006850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	429a      	cmp	r2, r3
 8006874:	d812      	bhi.n	800689c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	1ad2      	subs	r2, r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	429a      	cmp	r2, r3
 8006882:	d302      	bcc.n	800688a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e01b      	b.n	80068c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800688a:	4b10      	ldr	r3, [pc, #64]	; (80068cc <prvInsertTimerInActiveList+0x7c>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f7fe f8b6 	bl	8004a06 <vListInsert>
 800689a:	e012      	b.n	80068c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d206      	bcs.n	80068b2 <prvInsertTimerInActiveList+0x62>
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d302      	bcc.n	80068b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e007      	b.n	80068c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <prvInsertTimerInActiveList+0x80>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3304      	adds	r3, #4
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f7fe f8a2 	bl	8004a06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068c2:	697b      	ldr	r3, [r7, #20]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	2000083c 	.word	0x2000083c
 80068d0:	20000838 	.word	0x20000838

080068d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068da:	e0ac      	b.n	8006a36 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f2c0 80a8 	blt.w	8006a34 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe f8bf 	bl	8004a78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068fa:	1d3b      	adds	r3, r7, #4
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff87 	bl	8006810 <prvSampleTimeNow>
 8006902:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b09      	cmp	r3, #9
 8006908:	f200 8095 	bhi.w	8006a36 <prvProcessReceivedCommands+0x162>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <prvProcessReceivedCommands+0x40>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	0800693d 	.word	0x0800693d
 8006918:	0800693d 	.word	0x0800693d
 800691c:	0800693d 	.word	0x0800693d
 8006920:	080069af 	.word	0x080069af
 8006924:	080069c3 	.word	0x080069c3
 8006928:	08006a0b 	.word	0x08006a0b
 800692c:	0800693d 	.word	0x0800693d
 8006930:	0800693d 	.word	0x0800693d
 8006934:	080069af 	.word	0x080069af
 8006938:	080069c3 	.word	0x080069c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	18d1      	adds	r1, r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a3a      	ldr	r2, [r7, #32]
 800695a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800695c:	f7ff ff78 	bl	8006850 <prvInsertTimerInActiveList>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d067      	beq.n	8006a36 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800696c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d05c      	beq.n	8006a36 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	441a      	add	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2300      	movs	r3, #0
 800698a:	2100      	movs	r1, #0
 800698c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800698e:	f7ff fe23 	bl	80065d8 <xTimerGenericCommand>
 8006992:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d14d      	bne.n	8006a36 <prvProcessReceivedCommands+0x162>
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	e7fe      	b.n	80069ac <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80069c0:	e039      	b.n	8006a36 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069c8:	f043 0301 	orr.w	r3, r3, #1
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <prvProcessReceivedCommands+0x122>
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e7fe      	b.n	80069f4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	18d1      	adds	r1, r2, r3
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	6a3a      	ldr	r2, [r7, #32]
 8006a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a04:	f7ff ff24 	bl	8006850 <prvInsertTimerInActiveList>
					break;
 8006a08:	e015      	b.n	8006a36 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d103      	bne.n	8006a20 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8006a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a1a:	f000 fca7 	bl	800736c <vPortFree>
 8006a1e:	e00a      	b.n	8006a36 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a32:	e000      	b.n	8006a36 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <prvProcessReceivedCommands+0x184>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f107 0108 	add.w	r1, r7, #8
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe facb 	bl	8004fdc <xQueueReceive>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f47f af47 	bne.w	80068dc <prvProcessReceivedCommands+0x8>
	}
}
 8006a4e:	bf00      	nop
 8006a50:	3728      	adds	r7, #40	; 0x28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000840 	.word	0x20000840

08006a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a62:	e047      	b.n	8006af4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a64:	4b2d      	ldr	r3, [pc, #180]	; (8006b1c <prvSwitchTimerLists+0xc0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6e:	4b2b      	ldr	r3, [pc, #172]	; (8006b1c <prvSwitchTimerLists+0xc0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fd fffb 	bl	8004a78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02d      	beq.n	8006af4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d90e      	bls.n	8006ac8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ab6:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <prvSwitchTimerLists+0xc0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	f7fd ffa0 	bl	8004a06 <vListInsert>
 8006ac6:	e015      	b.n	8006af4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2300      	movs	r3, #0
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fd80 	bl	80065d8 <xTimerGenericCommand>
 8006ad8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <prvSwitchTimerLists+0x98>
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	e7fe      	b.n	8006af2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006af4:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <prvSwitchTimerLists+0xc0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1b2      	bne.n	8006a64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006afe:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <prvSwitchTimerLists+0xc0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b04:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <prvSwitchTimerLists+0xc4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a04      	ldr	r2, [pc, #16]	; (8006b1c <prvSwitchTimerLists+0xc0>)
 8006b0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b0c:	4a04      	ldr	r2, [pc, #16]	; (8006b20 <prvSwitchTimerLists+0xc4>)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	6013      	str	r3, [r2, #0]
}
 8006b12:	bf00      	nop
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000838 	.word	0x20000838
 8006b20:	2000083c 	.word	0x2000083c

08006b24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b2a:	f000 f95f 	bl	8006dec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b2e:	4b15      	ldr	r3, [pc, #84]	; (8006b84 <prvCheckForValidListAndQueue+0x60>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d120      	bne.n	8006b78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b36:	4814      	ldr	r0, [pc, #80]	; (8006b88 <prvCheckForValidListAndQueue+0x64>)
 8006b38:	f7fd ff14 	bl	8004964 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b3c:	4813      	ldr	r0, [pc, #76]	; (8006b8c <prvCheckForValidListAndQueue+0x68>)
 8006b3e:	f7fd ff11 	bl	8004964 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b42:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <prvCheckForValidListAndQueue+0x6c>)
 8006b44:	4a10      	ldr	r2, [pc, #64]	; (8006b88 <prvCheckForValidListAndQueue+0x64>)
 8006b46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b48:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <prvCheckForValidListAndQueue+0x70>)
 8006b4a:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <prvCheckForValidListAndQueue+0x68>)
 8006b4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <prvCheckForValidListAndQueue+0x74>)
 8006b54:	4a11      	ldr	r2, [pc, #68]	; (8006b9c <prvCheckForValidListAndQueue+0x78>)
 8006b56:	210c      	movs	r1, #12
 8006b58:	200a      	movs	r0, #10
 8006b5a:	f7fe f81f 	bl	8004b9c <xQueueGenericCreateStatic>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <prvCheckForValidListAndQueue+0x60>)
 8006b62:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b64:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <prvCheckForValidListAndQueue+0x60>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <prvCheckForValidListAndQueue+0x60>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	490b      	ldr	r1, [pc, #44]	; (8006ba0 <prvCheckForValidListAndQueue+0x7c>)
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fc1e 	bl	80053b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b78:	f000 f966 	bl	8006e48 <vPortExitCritical>
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000840 	.word	0x20000840
 8006b88:	20000810 	.word	0x20000810
 8006b8c:	20000824 	.word	0x20000824
 8006b90:	20000838 	.word	0x20000838
 8006b94:	2000083c 	.word	0x2000083c
 8006b98:	200008c4 	.word	0x200008c4
 8006b9c:	2000084c 	.word	0x2000084c
 8006ba0:	0800767c 	.word	0x0800767c

08006ba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3b04      	subs	r3, #4
 8006bb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3b04      	subs	r3, #4
 8006bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f023 0201 	bic.w	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3b04      	subs	r3, #4
 8006bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bd4:	4a0c      	ldr	r2, [pc, #48]	; (8006c08 <pxPortInitialiseStack+0x64>)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3b14      	subs	r3, #20
 8006bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3b04      	subs	r3, #4
 8006bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f06f 0202 	mvn.w	r2, #2
 8006bf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b20      	subs	r3, #32
 8006bf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	08006c0d 	.word	0x08006c0d

08006c0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <prvTaskExitError+0x50>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c1e:	d009      	beq.n	8006c34 <prvTaskExitError+0x28>
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e7fe      	b.n	8006c32 <prvTaskExitError+0x26>
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c46:	bf00      	nop
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0fc      	beq.n	8006c48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	2000000c 	.word	0x2000000c

08006c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <pxCurrentTCBConst2>)
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	6808      	ldr	r0, [r1, #0]
 8006c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	f380 8809 	msr	PSP, r0
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8811 	msr	BASEPRI, r0
 8006c7a:	4770      	bx	lr
 8006c7c:	f3af 8000 	nop.w

08006c80 <pxCurrentTCBConst2>:
 8006c80:	200006dc 	.word	0x200006dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c88:	4808      	ldr	r0, [pc, #32]	; (8006cac <prvPortStartFirstTask+0x24>)
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	6800      	ldr	r0, [r0, #0]
 8006c8e:	f380 8808 	msr	MSP, r0
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8814 	msr	CONTROL, r0
 8006c9a:	b662      	cpsie	i
 8006c9c:	b661      	cpsie	f
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	df00      	svc	0
 8006ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006caa:	bf00      	nop
 8006cac:	e000ed08 	.word	0xe000ed08

08006cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cb6:	4b44      	ldr	r3, [pc, #272]	; (8006dc8 <xPortStartScheduler+0x118>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a44      	ldr	r2, [pc, #272]	; (8006dcc <xPortStartScheduler+0x11c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d109      	bne.n	8006cd4 <xPortStartScheduler+0x24>
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e7fe      	b.n	8006cd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cd4:	4b3c      	ldr	r3, [pc, #240]	; (8006dc8 <xPortStartScheduler+0x118>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a3d      	ldr	r2, [pc, #244]	; (8006dd0 <xPortStartScheduler+0x120>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d109      	bne.n	8006cf2 <xPortStartScheduler+0x42>
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e7fe      	b.n	8006cf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cf2:	4b38      	ldr	r3, [pc, #224]	; (8006dd4 <xPortStartScheduler+0x124>)
 8006cf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	22ff      	movs	r2, #255	; 0xff
 8006d02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	4b30      	ldr	r3, [pc, #192]	; (8006dd8 <xPortStartScheduler+0x128>)
 8006d18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d1a:	4b30      	ldr	r3, [pc, #192]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d20:	e009      	b.n	8006d36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006d2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d0ef      	beq.n	8006d22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d42:	4b26      	ldr	r3, [pc, #152]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f1c3 0307 	rsb	r3, r3, #7
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d009      	beq.n	8006d62 <xPortStartScheduler+0xb2>
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60bb      	str	r3, [r7, #8]
 8006d60:	e7fe      	b.n	8006d60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d62:	4b1e      	ldr	r3, [pc, #120]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006d6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d74:	4a19      	ldr	r2, [pc, #100]	; (8006ddc <xPortStartScheduler+0x12c>)
 8006d76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d80:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <xPortStartScheduler+0x130>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a16      	ldr	r2, [pc, #88]	; (8006de0 <xPortStartScheduler+0x130>)
 8006d86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d8c:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <xPortStartScheduler+0x130>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a13      	ldr	r2, [pc, #76]	; (8006de0 <xPortStartScheduler+0x130>)
 8006d92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d98:	f000 f9a2 	bl	80070e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d9c:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <xPortStartScheduler+0x134>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006da2:	f000 f9d9 	bl	8007158 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <xPortStartScheduler+0x138>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a0f      	ldr	r2, [pc, #60]	; (8006de8 <xPortStartScheduler+0x138>)
 8006dac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006db0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006db2:	f7ff ff69 	bl	8006c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006db6:	f7fe ff57 	bl	8005c68 <vTaskSwitchContext>
	prvTaskExitError();
 8006dba:	f7ff ff27 	bl	8006c0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	e000ed00 	.word	0xe000ed00
 8006dcc:	410fc271 	.word	0x410fc271
 8006dd0:	410fc270 	.word	0x410fc270
 8006dd4:	e000e400 	.word	0xe000e400
 8006dd8:	20000918 	.word	0x20000918
 8006ddc:	2000091c 	.word	0x2000091c
 8006de0:	e000ed20 	.word	0xe000ed20
 8006de4:	2000000c 	.word	0x2000000c
 8006de8:	e000ef34 	.word	0xe000ef34

08006dec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e04:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <vPortEnterCritical+0x54>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	4a0d      	ldr	r2, [pc, #52]	; (8006e40 <vPortEnterCritical+0x54>)
 8006e0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <vPortEnterCritical+0x54>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d10e      	bne.n	8006e34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <vPortEnterCritical+0x58>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d009      	beq.n	8006e34 <vPortEnterCritical+0x48>
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	e7fe      	b.n	8006e32 <vPortEnterCritical+0x46>
	}
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	2000000c 	.word	0x2000000c
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <vPortExitCritical+0x4c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <vPortExitCritical+0x22>
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	607b      	str	r3, [r7, #4]
 8006e68:	e7fe      	b.n	8006e68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006e6a:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <vPortExitCritical+0x4c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	4a08      	ldr	r2, [pc, #32]	; (8006e94 <vPortExitCritical+0x4c>)
 8006e72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <vPortExitCritical+0x4c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <vPortExitCritical+0x3e>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	2000000c 	.word	0x2000000c
	...

08006ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ea0:	f3ef 8009 	mrs	r0, PSP
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <pxCurrentTCBConst>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	f01e 0f10 	tst.w	lr, #16
 8006eb0:	bf08      	it	eq
 8006eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eba:	6010      	str	r0, [r2, #0]
 8006ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ec4:	f380 8811 	msr	BASEPRI, r0
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f7fe feca 	bl	8005c68 <vTaskSwitchContext>
 8006ed4:	f04f 0000 	mov.w	r0, #0
 8006ed8:	f380 8811 	msr	BASEPRI, r0
 8006edc:	bc09      	pop	{r0, r3}
 8006ede:	6819      	ldr	r1, [r3, #0]
 8006ee0:	6808      	ldr	r0, [r1, #0]
 8006ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee6:	f01e 0f10 	tst.w	lr, #16
 8006eea:	bf08      	it	eq
 8006eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ef0:	f380 8809 	msr	PSP, r0
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	f3af 8000 	nop.w

08006f00 <pxCurrentTCBConst>:
 8006f00:	200006dc 	.word	0x200006dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop

08006f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f20:	f7fe fdea 	bl	8005af8 <xTaskIncrementTick>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f2a:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <xPortSysTickHandler+0x3c>)
 8006f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	2300      	movs	r3, #0
 8006f34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	e000ed04 	.word	0xe000ed04

08006f48 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4b5d      	ldr	r3, [pc, #372]	; (80070c8 <vPortSuppressTicksAndSleep+0x180>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d902      	bls.n	8006f60 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8006f5a:	4b5b      	ldr	r3, [pc, #364]	; (80070c8 <vPortSuppressTicksAndSleep+0x180>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8006f60:	4b5a      	ldr	r3, [pc, #360]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a59      	ldr	r2, [pc, #356]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8006f6c:	4b58      	ldr	r3, [pc, #352]	; (80070d0 <vPortSuppressTicksAndSleep+0x188>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	4957      	ldr	r1, [pc, #348]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 8006f76:	6809      	ldr	r1, [r1, #0]
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	4413      	add	r3, r2
 8006f7e:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8006f80:	4b55      	ldr	r3, [pc, #340]	; (80070d8 <vPortSuppressTicksAndSleep+0x190>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69fa      	ldr	r2, [r7, #28]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d904      	bls.n	8006f94 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8006f8a:	4b53      	ldr	r3, [pc, #332]	; (80070d8 <vPortSuppressTicksAndSleep+0x190>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8006f94:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8006f96:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8006f9a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8006f9e:	f7ff f84b 	bl	8006038 <eTaskConfirmSleepModeStatus>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d110      	bne.n	8006fca <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006fa8:	4b49      	ldr	r3, [pc, #292]	; (80070d0 <vPortSuppressTicksAndSleep+0x188>)
 8006faa:	4a4c      	ldr	r2, [pc, #304]	; (80070dc <vPortSuppressTicksAndSleep+0x194>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006fb0:	4b46      	ldr	r3, [pc, #280]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a45      	ldr	r2, [pc, #276]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 8006fb6:	f043 0301 	orr.w	r3, r3, #1
 8006fba:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006fbc:	4b45      	ldr	r3, [pc, #276]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a46      	ldr	r2, [pc, #280]	; (80070dc <vPortSuppressTicksAndSleep+0x194>)
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8006fc6:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8006fc8:	e07a      	b.n	80070c0 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8006fca:	4a44      	ldr	r2, [pc, #272]	; (80070dc <vPortSuppressTicksAndSleep+0x194>)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fd0:	4b3f      	ldr	r3, [pc, #252]	; (80070d0 <vPortSuppressTicksAndSleep+0x188>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006fd6:	4b3d      	ldr	r3, [pc, #244]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a3c      	ldr	r2, [pc, #240]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8006fe6:	f107 030c 	add.w	r3, r7, #12
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7f9 fa87 	bl	80004fe <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8006ff6:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8006ffa:	bf30      	wfi
				__asm volatile( "isb" );
 8006ffc:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8007000:	1d3b      	adds	r3, r7, #4
 8007002:	4618      	mov	r0, r3
 8007004:	f7f9 fa85 	bl	8000512 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8007008:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800700a:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800700e:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8007012:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8007014:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007018:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800701c:	4b2b      	ldr	r3, [pc, #172]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 800701e:	2206      	movs	r2, #6
 8007020:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8007022:	4b2a      	ldr	r3, [pc, #168]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01d      	beq.n	800706a <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800702e:	4b29      	ldr	r3, [pc, #164]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b27      	ldr	r3, [pc, #156]	; (80070d0 <vPortSuppressTicksAndSleep+0x188>)
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	1acb      	subs	r3, r1, r3
 800703a:	4413      	add	r3, r2
 800703c:	3b01      	subs	r3, #1
 800703e:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8007040:	4b25      	ldr	r3, [pc, #148]	; (80070d8 <vPortSuppressTicksAndSleep+0x190>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	429a      	cmp	r2, r3
 8007048:	d304      	bcc.n	8007054 <vPortSuppressTicksAndSleep+0x10c>
 800704a:	4b22      	ldr	r3, [pc, #136]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	429a      	cmp	r2, r3
 8007052:	d903      	bls.n	800705c <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007054:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3b01      	subs	r3, #1
 800705a:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800705c:	4a1f      	ldr	r2, [pc, #124]	; (80070dc <vPortSuppressTicksAndSleep+0x194>)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3b01      	subs	r3, #1
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	e018      	b.n	800709c <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a19      	ldr	r2, [pc, #100]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	fb02 f203 	mul.w	r2, r2, r3
 8007074:	4b16      	ldr	r3, [pc, #88]	; (80070d0 <vPortSuppressTicksAndSleep+0x188>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800707c:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	fbb2 f3f3 	udiv	r3, r2, r3
 8007086:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	3301      	adds	r3, #1
 800708c:	4a11      	ldr	r2, [pc, #68]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	fb02 f203 	mul.w	r2, r2, r3
 8007094:	4911      	ldr	r1, [pc, #68]	; (80070dc <vPortSuppressTicksAndSleep+0x194>)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800709c:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <vPortSuppressTicksAndSleep+0x188>)
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80070a2:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a09      	ldr	r2, [pc, #36]	; (80070cc <vPortSuppressTicksAndSleep+0x184>)
 80070a8:	f043 0301 	orr.w	r3, r3, #1
 80070ac:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80070ae:	69b8      	ldr	r0, [r7, #24]
 80070b0:	f7fe fcfc 	bl	8005aac <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80070b4:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <vPortSuppressTicksAndSleep+0x18c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a08      	ldr	r2, [pc, #32]	; (80070dc <vPortSuppressTicksAndSleep+0x194>)
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 80070be:	b662      	cpsie	i
	}
 80070c0:	bf00      	nop
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000910 	.word	0x20000910
 80070cc:	e000e010 	.word	0xe000e010
 80070d0:	e000e018 	.word	0xe000e018
 80070d4:	2000090c 	.word	0x2000090c
 80070d8:	20000914 	.word	0x20000914
 80070dc:	e000e014 	.word	0xe000e014

080070e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80070e4:	4b14      	ldr	r3, [pc, #80]	; (8007138 <vPortSetupTimerInterrupt+0x58>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a14      	ldr	r2, [pc, #80]	; (800713c <vPortSetupTimerInterrupt+0x5c>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	099b      	lsrs	r3, r3, #6
 80070f0:	4a13      	ldr	r2, [pc, #76]	; (8007140 <vPortSetupTimerInterrupt+0x60>)
 80070f2:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80070f4:	4b12      	ldr	r3, [pc, #72]	; (8007140 <vPortSetupTimerInterrupt+0x60>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80070fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007100:	4a10      	ldr	r2, [pc, #64]	; (8007144 <vPortSetupTimerInterrupt+0x64>)
 8007102:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8007104:	4b10      	ldr	r3, [pc, #64]	; (8007148 <vPortSetupTimerInterrupt+0x68>)
 8007106:	222d      	movs	r2, #45	; 0x2d
 8007108:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800710a:	4b10      	ldr	r3, [pc, #64]	; (800714c <vPortSetupTimerInterrupt+0x6c>)
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007110:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <vPortSetupTimerInterrupt+0x70>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007116:	4b08      	ldr	r3, [pc, #32]	; (8007138 <vPortSetupTimerInterrupt+0x58>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a08      	ldr	r2, [pc, #32]	; (800713c <vPortSetupTimerInterrupt+0x5c>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	099b      	lsrs	r3, r3, #6
 8007122:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <vPortSetupTimerInterrupt+0x74>)
 8007124:	3b01      	subs	r3, #1
 8007126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007128:	4b08      	ldr	r3, [pc, #32]	; (800714c <vPortSetupTimerInterrupt+0x6c>)
 800712a:	2207      	movs	r2, #7
 800712c:	601a      	str	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	20000000 	.word	0x20000000
 800713c:	10624dd3 	.word	0x10624dd3
 8007140:	2000090c 	.word	0x2000090c
 8007144:	20000910 	.word	0x20000910
 8007148:	20000914 	.word	0x20000914
 800714c:	e000e010 	.word	0xe000e010
 8007150:	e000e018 	.word	0xe000e018
 8007154:	e000e014 	.word	0xe000e014

08007158 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007158:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007168 <vPortEnableVFP+0x10>
 800715c:	6801      	ldr	r1, [r0, #0]
 800715e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007162:	6001      	str	r1, [r0, #0]
 8007164:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007166:	bf00      	nop
 8007168:	e000ed88 	.word	0xe000ed88

0800716c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007172:	f3ef 8305 	mrs	r3, IPSR
 8007176:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d913      	bls.n	80071a6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800717e:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <vPortValidateInterruptPriority+0x6c>)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007188:	4b14      	ldr	r3, [pc, #80]	; (80071dc <vPortValidateInterruptPriority+0x70>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	7afa      	ldrb	r2, [r7, #11]
 800718e:	429a      	cmp	r2, r3
 8007190:	d209      	bcs.n	80071a6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	e7fe      	b.n	80071a4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071a6:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <vPortValidateInterruptPriority+0x74>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <vPortValidateInterruptPriority+0x78>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d909      	bls.n	80071ca <vPortValidateInterruptPriority+0x5e>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	e7fe      	b.n	80071c8 <vPortValidateInterruptPriority+0x5c>
	}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	e000e3f0 	.word	0xe000e3f0
 80071dc:	20000918 	.word	0x20000918
 80071e0:	e000ed0c 	.word	0xe000ed0c
 80071e4:	2000091c 	.word	0x2000091c

080071e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	; 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071f4:	f7fe fb66 	bl	80058c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071f8:	4b57      	ldr	r3, [pc, #348]	; (8007358 <pvPortMalloc+0x170>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007200:	f000 f90c 	bl	800741c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007204:	4b55      	ldr	r3, [pc, #340]	; (800735c <pvPortMalloc+0x174>)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	f040 808c 	bne.w	800732a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01c      	beq.n	8007252 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007218:	2208      	movs	r2, #8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	2b00      	cmp	r3, #0
 8007228:	d013      	beq.n	8007252 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f023 0307 	bic.w	r3, r3, #7
 8007230:	3308      	adds	r3, #8
 8007232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <pvPortMalloc+0x6a>
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	e7fe      	b.n	8007250 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d068      	beq.n	800732a <pvPortMalloc+0x142>
 8007258:	4b41      	ldr	r3, [pc, #260]	; (8007360 <pvPortMalloc+0x178>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	429a      	cmp	r2, r3
 8007260:	d863      	bhi.n	800732a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007262:	4b40      	ldr	r3, [pc, #256]	; (8007364 <pvPortMalloc+0x17c>)
 8007264:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007266:	4b3f      	ldr	r3, [pc, #252]	; (8007364 <pvPortMalloc+0x17c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800726c:	e004      	b.n	8007278 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	429a      	cmp	r2, r3
 8007280:	d903      	bls.n	800728a <pvPortMalloc+0xa2>
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f1      	bne.n	800726e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800728a:	4b33      	ldr	r3, [pc, #204]	; (8007358 <pvPortMalloc+0x170>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007290:	429a      	cmp	r2, r3
 8007292:	d04a      	beq.n	800732a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	4413      	add	r3, r2
 800729c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	1ad2      	subs	r2, r2, r3
 80072ae:	2308      	movs	r3, #8
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d91e      	bls.n	80072f4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4413      	add	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d009      	beq.n	80072dc <pvPortMalloc+0xf4>
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	e7fe      	b.n	80072da <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072ee:	69b8      	ldr	r0, [r7, #24]
 80072f0:	f000 f8f6 	bl	80074e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072f4:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <pvPortMalloc+0x178>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	4a18      	ldr	r2, [pc, #96]	; (8007360 <pvPortMalloc+0x178>)
 8007300:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007302:	4b17      	ldr	r3, [pc, #92]	; (8007360 <pvPortMalloc+0x178>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b18      	ldr	r3, [pc, #96]	; (8007368 <pvPortMalloc+0x180>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d203      	bcs.n	8007316 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800730e:	4b14      	ldr	r3, [pc, #80]	; (8007360 <pvPortMalloc+0x178>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a15      	ldr	r2, [pc, #84]	; (8007368 <pvPortMalloc+0x180>)
 8007314:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	4b10      	ldr	r3, [pc, #64]	; (800735c <pvPortMalloc+0x174>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	431a      	orrs	r2, r3
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800732a:	f7fe fb13 	bl	8005954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <pvPortMalloc+0x164>
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e7fe      	b.n	800734a <pvPortMalloc+0x162>
	return pvReturn;
 800734c:	69fb      	ldr	r3, [r7, #28]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3728      	adds	r7, #40	; 0x28
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20004528 	.word	0x20004528
 800735c:	20004534 	.word	0x20004534
 8007360:	2000452c 	.word	0x2000452c
 8007364:	20004520 	.word	0x20004520
 8007368:	20004530 	.word	0x20004530

0800736c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d046      	beq.n	800740c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800737e:	2308      	movs	r3, #8
 8007380:	425b      	negs	r3, r3
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	4413      	add	r3, r2
 8007386:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	4b20      	ldr	r3, [pc, #128]	; (8007414 <vPortFree+0xa8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4013      	ands	r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <vPortFree+0x42>
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e7fe      	b.n	80073ac <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <vPortFree+0x5e>
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	60bb      	str	r3, [r7, #8]
 80073c8:	e7fe      	b.n	80073c8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	4b11      	ldr	r3, [pc, #68]	; (8007414 <vPortFree+0xa8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d019      	beq.n	800740c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d115      	bne.n	800740c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <vPortFree+0xa8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	43db      	mvns	r3, r3
 80073ea:	401a      	ands	r2, r3
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073f0:	f7fe fa68 	bl	80058c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	4b07      	ldr	r3, [pc, #28]	; (8007418 <vPortFree+0xac>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4413      	add	r3, r2
 80073fe:	4a06      	ldr	r2, [pc, #24]	; (8007418 <vPortFree+0xac>)
 8007400:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007402:	6938      	ldr	r0, [r7, #16]
 8007404:	f000 f86c 	bl	80074e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007408:	f7fe faa4 	bl	8005954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800740c:	bf00      	nop
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20004534 	.word	0x20004534
 8007418:	2000452c 	.word	0x2000452c

0800741c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007422:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007426:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007428:	4b27      	ldr	r3, [pc, #156]	; (80074c8 <prvHeapInit+0xac>)
 800742a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00c      	beq.n	8007450 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3307      	adds	r3, #7
 800743a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0307 	bic.w	r3, r3, #7
 8007442:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	4a1f      	ldr	r2, [pc, #124]	; (80074c8 <prvHeapInit+0xac>)
 800744c:	4413      	add	r3, r2
 800744e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007454:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <prvHeapInit+0xb0>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800745a:	4b1c      	ldr	r3, [pc, #112]	; (80074cc <prvHeapInit+0xb0>)
 800745c:	2200      	movs	r2, #0
 800745e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4413      	add	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007468:	2208      	movs	r2, #8
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	1a9b      	subs	r3, r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0307 	bic.w	r3, r3, #7
 8007476:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4a15      	ldr	r2, [pc, #84]	; (80074d0 <prvHeapInit+0xb4>)
 800747c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800747e:	4b14      	ldr	r3, [pc, #80]	; (80074d0 <prvHeapInit+0xb4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007486:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <prvHeapInit+0xb4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <prvHeapInit+0xb4>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <prvHeapInit+0xb8>)
 80074aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <prvHeapInit+0xbc>)
 80074b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074b4:	4b09      	ldr	r3, [pc, #36]	; (80074dc <prvHeapInit+0xc0>)
 80074b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074ba:	601a      	str	r2, [r3, #0]
}
 80074bc:	bf00      	nop
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000920 	.word	0x20000920
 80074cc:	20004520 	.word	0x20004520
 80074d0:	20004528 	.word	0x20004528
 80074d4:	20004530 	.word	0x20004530
 80074d8:	2000452c 	.word	0x2000452c
 80074dc:	20004534 	.word	0x20004534

080074e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074e8:	4b28      	ldr	r3, [pc, #160]	; (800758c <prvInsertBlockIntoFreeList+0xac>)
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	e002      	b.n	80074f4 <prvInsertBlockIntoFreeList+0x14>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d8f7      	bhi.n	80074ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	4413      	add	r3, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	d108      	bne.n	8007522 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	441a      	add	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	441a      	add	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d118      	bne.n	8007568 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	4b15      	ldr	r3, [pc, #84]	; (8007590 <prvInsertBlockIntoFreeList+0xb0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d00d      	beq.n	800755e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	441a      	add	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e008      	b.n	8007570 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <prvInsertBlockIntoFreeList+0xb0>)
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e003      	b.n	8007570 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	429a      	cmp	r2, r3
 8007576:	d002      	beq.n	800757e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	20004520 	.word	0x20004520
 8007590:	20004528 	.word	0x20004528

08007594 <__libc_init_array>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	4e0d      	ldr	r6, [pc, #52]	; (80075cc <__libc_init_array+0x38>)
 8007598:	4c0d      	ldr	r4, [pc, #52]	; (80075d0 <__libc_init_array+0x3c>)
 800759a:	1ba4      	subs	r4, r4, r6
 800759c:	10a4      	asrs	r4, r4, #2
 800759e:	2500      	movs	r5, #0
 80075a0:	42a5      	cmp	r5, r4
 80075a2:	d109      	bne.n	80075b8 <__libc_init_array+0x24>
 80075a4:	4e0b      	ldr	r6, [pc, #44]	; (80075d4 <__libc_init_array+0x40>)
 80075a6:	4c0c      	ldr	r4, [pc, #48]	; (80075d8 <__libc_init_array+0x44>)
 80075a8:	f000 f82c 	bl	8007604 <_init>
 80075ac:	1ba4      	subs	r4, r4, r6
 80075ae:	10a4      	asrs	r4, r4, #2
 80075b0:	2500      	movs	r5, #0
 80075b2:	42a5      	cmp	r5, r4
 80075b4:	d105      	bne.n	80075c2 <__libc_init_array+0x2e>
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075bc:	4798      	blx	r3
 80075be:	3501      	adds	r5, #1
 80075c0:	e7ee      	b.n	80075a0 <__libc_init_array+0xc>
 80075c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075c6:	4798      	blx	r3
 80075c8:	3501      	adds	r5, #1
 80075ca:	e7f2      	b.n	80075b2 <__libc_init_array+0x1e>
 80075cc:	080076a4 	.word	0x080076a4
 80075d0:	080076a4 	.word	0x080076a4
 80075d4:	080076a4 	.word	0x080076a4
 80075d8:	080076a8 	.word	0x080076a8

080075dc <memcpy>:
 80075dc:	b510      	push	{r4, lr}
 80075de:	1e43      	subs	r3, r0, #1
 80075e0:	440a      	add	r2, r1
 80075e2:	4291      	cmp	r1, r2
 80075e4:	d100      	bne.n	80075e8 <memcpy+0xc>
 80075e6:	bd10      	pop	{r4, pc}
 80075e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f0:	e7f7      	b.n	80075e2 <memcpy+0x6>

080075f2 <memset>:
 80075f2:	4402      	add	r2, r0
 80075f4:	4603      	mov	r3, r0
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d100      	bne.n	80075fc <memset+0xa>
 80075fa:	4770      	bx	lr
 80075fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007600:	e7f9      	b.n	80075f6 <memset+0x4>
	...

08007604 <_init>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	bf00      	nop
 8007608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760a:	bc08      	pop	{r3}
 800760c:	469e      	mov	lr, r3
 800760e:	4770      	bx	lr

08007610 <_fini>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr
